{"doctype":"markdown","bookId":"book:1Z9mQC7yF","createdAt":1673304787409,"updatedAt":1694534159747,"status":"active","share":"private","numOfTasks":0,"numOfCheckedTasks":0,"title":"Work","body":"# Unix Toolbox\n\nThis document is a collection of Unix/Linux/BSD commands and tasks which are useful for IT work or for advanced users. This is a practical guide with concise explanations, however the reader is supposed to know what s/he is doing.  \n  \n\nUnix Toolbox revision 14.4  \nThe latest version of this document can be found at [http://cb.vu/unixtoolbox.xhtml](http://cb.vu/unixtoolbox.xhtml). Replace .xhtml on the link with [.pdf](http://cb.vu/unixtoolbox.pdf) for the PDF version and with [.book.pdf](http://cb.vu/unixtoolbox.book.pdf) for the booklet version. On a duplex printer the booklet will create a small book ready to bind. This XHTML page can be converted into a nice PDF document with a CSS3 compliant application (see the [script example](#bourneexample)). See also the [about page](http://cb.vu/unixtoolbox).  \nError reports and comments are most welcome - [c@cb.vu](mailto:c%5Cat%5Ccb.vu) Colin Barschel.\n\nÂ© [Colin Barschel](mailto:c_at_cb.vu) 2007-2012. [Some rights reserved under Creative Commons](http://creativecommons.org/licenses/by-sa/3.0/).\n\n1.  [System](#sysinfo)\n2.  [Processes](#processes)\n3.  [File System](#filesystem)\n4.  [Network](#network)\n5.  [SSH SCP](#ssh)\n6.  [VPN with SSH](#vpn)\n7.  [RSYNC](#rsync)\n8.  [SUDO](#sudo)\n9.  [Encrypt Files](#crypt)\n10.  [Encrypt Partitions](#cryptpart)\n11.  [SSL Certificates](#certs)\n12.  [CVS](#cvs)\n13.  [SVN](#svn)\n14.  [Useful Commands](#other)\n15.  [Install Software](#software)\n16.  [Convert Media](#convert)\n17.  [Printing](#printing)\n18.  [Databases](#databases)\n19.  [Disk Quota](#quota)\n20.  [Shells](#shells)\n21.  [Scripting](#scripting)\n22.  [Programming](#programming)\n23.  [Online Help](#onlinehelp)\n\n  \n\n[white](#) [black](#)\n\nSystem\n======\n\n[Hardware](#hardwareinfo) | [Statistics](#loadstats) | [Users](#users) | [Limits](#limits) | [Runlevels](#runlevels) | [root password](#resetpasswd) | [Compile kernel](#compilekernel) | [Repair grub](#grub) | [Misc](#sysmisc)\n\n# Running kernel and system information\n\n#### uname -a                           \\# Get the kernel version (and BSD version)\n#### lsb\\_release -a                     \\# Full release info of any LSB distribution\n#### cat /etc/SuSE-release              \\# Get SuSE version\n#### cat /etc/debian\\_version            \\# Get Debian version\n\nUse /etc/`DISTR`\\-release with `DISTR=` lsb (Ubuntu), redhat, gentoo, mandrake, sun (Solaris), and so on. See also `/etc/issue`.\n\n\\# uptime                             \\# Show how long the system has been running + load\n#### hostname                           \\# system's host name\n#### hostname -i                        \\# Display the IP address of the host. (Linux only)\n#### man hier                           \\# Description of the file system hierarchy\n#### last reboot                        \\# Show system reboot history\n\nHardware Informations\n---------------------\n\nKernel detected hardware\n\n\\# dmesg                              \\# Detected hardware and boot messages\n#### lsdev                              \\# information about installed hardware\n#### dd if=/dev/mem bs=1k skip=768 count=256 2>/dev/null | strings -n 8 \\# Read BIOS\n\n# Linux\n\n\\# cat /proc/cpuinfo                  \\# CPU model\n#### cat /proc/meminfo                  \\# Hardware memory\n#### grep MemTotal /proc/meminfo        \\# Display the physical memory\n#### watch -n1 'cat /proc/interrupts'   \\# Watch changeable interrupts continuously\n#### free -m                            \\# Used and free memory (-m for MB)\n#### cat /proc/devices                  \\# Configured devices\n#### lspci -tv                          \\# Show PCI devices\n#### lsusb -tv                          \\# Show USB devices\n#### lshal                              \\# Show a list of all devices with their properties\n#### dmidecode                          \\# Show DMI/SMBIOS: hw info from the BIOS\n\n# FreeBSD\n\n#### sysctl hw.model                    \\# CPU model\n#### sysctl hw                          \\# Gives a lot of hardware information\n#### sysctl hw.ncpu                     \\# number of active CPUs installed\n#### sysctl vm                          \\# Memory usage\n#### sysctl hw.realmem                  \\# Hardware memory\n#### sysctl -a | grep mem               \\# Kernel memory settings and info\n#### sysctl dev                         \\# Configured devices\n#### pciconf -l -cv                     \\# Show PCI devices\n#### usbdevs -v                         \\# Show USB devices\n#### atacontrol list                    \\# Show ATA devices\n#### camcontrol devlist -v              \\# Show SCSI devices\n\n# Load, statistics and messages\n-----------------------------\n\nThe following commands are useful to find out what is going on on the system.\n\n#### top                                \\# display and update the top cpu processes\n#### mpstat 1                           \\# display processors related statistics\n#### vmstat 2                           \\# display virtual memory statistics\n#### iostat 2                           \\# display I/O statistics (2 s intervals)\n#### systat -vmstat 1                   \\# BSD summary of system statistics (1 s intervals)\n#### systat -tcp 1                      \\# BSD tcp connections (try also -ip)\n#### systat -netstat 1                  \\# BSD active network connections\n#### systat -ifstat 1                   \\# BSD network traffic through active interfaces\n#### systat -iostat 1                   \\# BSD CPU and and disk throughput\n#### ipcs -a                            \\# information on System V interprocess\n#### tail -n 500 /var/log/messages      \\# Last 500 kernel/syslog messages\n#### tail /var/log/warn                 \\# System warnings messages see syslog.conf\n\nUsers\n-----\n\n#### id                                 \\# Show the active user id with login and group\n#### last                               \\# Show last logins on the system\n#### who                                \\# Show who is logged on the system\n#### groupadd admin                     \\# Add group \"admin\" and user colin (Linux/Solaris)\n#### useradd -c \"Colin Barschel\" -g admin -m colin\n#### usermod -a -G groupName userName       \\# Add existing user to group (Debian)\n#### groupmod -A userName groupName         \\# Add existing user to group (SuSE)\n#### userdel colin                      \\# Delete user colin (Linux/Solaris)\n#### adduser joe                        \\# FreeBSD add user joe (interactive)\n#### rmuser joe                         \\# FreeBSD delete user joe (interactive)\n#### pw groupadd admin                  \\# Use pw on FreeBSD\n#### pw groupmod admin -m newmember     \\# Add a new member to a group\n#### pw useradd colin -c \"Colin Barschel\" -g admin -m -s /bin/tcsh \n#### pw userdel colin; pw groupdel admin\n\nEncrypted passwords are stored in /etc/shadow for Linux and Solaris and /etc/master.passwd on FreeBSD. If the master.passwd is modified manually (say to delete a password), run `# pwd_mkdb -p master.passwd` to rebuild the database.  \n  \nTo temporarily prevent logins system wide (for all users but root) use nologin. The message in nologin will be displayed (might not work with ssh pre-shared keys).\n\n#### echo \"Sorry no login now\" > /etc/nologin       \\# (Linux)\n#### echo \"Sorry no login now\" > /var/run/nologin   \\# (FreeBSD)\n\n# Limits\n------\n\nSome application require higher limits on open files and sockets (like a proxy web server, database). The default limits are usually too low.\n\n## Linux\n\n#### Per shell/script\n\nThe shell limits are governed by `ulimit`. The status is checked with `ulimit -a`. For example to change the open files limit from 1024 to 10240 do:\n\n#### ulimit -n 10240                    \\# This is only valid within the shell\n\nThe `ulimit` command can be used in a script to change the limits for the script only.\n\n#### Per user/process\n\nLogin users and applications can be configured in `/etc/security/limits.conf`. For example:\n\n#### cat /etc/security/limits.conf\n\\*   hard    nproc   250              \\# Limit user processes\nasterisk hard nofile 409600          \\# Limit application open files\n\n## System wide\n\nKernel limits are set with sysctl. Permanent limits are set in `/etc/sysctl.conf`.\n\n#### sysctl -a                          \\# View all system limits\n#### sysctl fs.file-max                 \\# View max open files limit\n#### sysctl fs.file-max=102400          \\# Change max open files limit\n#### echo \"1024 50000\" > /proc/sys/net/ipv4/ip\\_local\\_port\\_range  \\# port range\n#### cat /etc/sysctl.conf fs.file-max=102400                   \\# Permanent entry in sysctl.conf\n#### cat /proc/sys/fs/file-nr           \\# How many file descriptors are in use\n\n## FreeBSD\n\n#### Per shell/script\n\nUse the command `limits` in csh or tcsh or as in Linux, use `ulimit` in an sh or bash shell.\n\n#### Per user/process\n\nThe default limits on login are set in `/etc/login.conf`. An unlimited value is still limited by the system maximal value.\n\n#### System wide\n\nKernel limits are also set with sysctl. Permanent limits are set in `/etc/sysctl.conf` or `/boot/loader.conf`. The syntax is the same as Linux but the keys are different.\n\n#### sysctl -a                          \\# View all system limits\n#### sysctl kern.maxfiles=XXXX          \\# maximum number of file descriptors\n##### kern.ipc.nmbclusters=32768           \\# Permanent entry in /etc/sysctl.conf\n##### kern.maxfiles=65536                  \\# Typical values for Squid\n##### kern.maxfilesperproc=32768\n##### kern.ipc.somaxconn=8192              \\# TCP queue. Better for apache/sendmail\n#### sysctl kern.openfiles              \\# How many file descriptors are in use\n#### sysctl kern.ipc.numopensockets     \\# How many open sockets are in use\n#### sysctl net.inet.ip.portrange.last=50000 \\# Default is 1024-5000\n#### netstat -m                         \\# network memory buffers statistics\n\nSee The [FreeBSD handbook Chapter 11](http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/configtuning-kernel-limits.html)http://www.freebsd.org/handbook/configtuning-kernel-limits.html for details. And also [FreeBSD performance tuning](http://serverfault.com/questions/64356/freebsd-performance-tuning-sysctls-loader-conf-kernel)http://serverfault.com/questions/64356/freebsd-performance-tuning-sysctls-loader-conf-kernel\n\n### Solaris\n\nThe following values in `/etc/system` will increase the maximum file descriptors per proc:\n\nset rlim\\_fd\\_max = 4096               \\# Hard limit on file descriptors for a single proc\nset rlim\\_fd\\_cur = 1024               \\# Soft limit on file descriptors for a single proc\n\nRunlevels\n---------\n\n### Linux\n\nOnce booted, the kernel starts `init` which then starts `rc` which starts all scripts belonging to a runlevel. The scripts are stored in /etc/init.d and are linked into /etc/rc.d/rcN.d with N the runlevel number.  \nThe default runlevel is configured in /etc/inittab. It is usually 3 or 5:\n\n\\# grep default: /etc/inittab                                         \nid:3:initdefault:\n\nThe actual runlevel can be changed with `init`. For example to go from 3 to 5:\n\n\\# init 5                             \\# Enters runlevel 5\n\n*   0       Shutdown and halt\n*   1       Single-User mode (also S)\n*   2       Multi-user without network\n*   3       Multi-user with network\n*   5       Multi-user with X\n*   6       Reboot\n\nUse `chkconfig` to configure the programs that will be started at boot in a runlevel.\n\n\\# chkconfig --list                   \\# List all init scripts\n# chkconfig --list sshd              \\# Report the status of sshd\n# chkconfig sshd --level 35 on       \\# Configure sshd for levels 3 and 5\n# chkconfig sshd off                 \\# Disable sshd for all runlevels\n\nDebian and Debian based distributions like Ubuntu or Knoppix use the command `update-rc.d` to manage the runlevels scripts. Default is to start in 2,3,4 and 5 and shutdown in 0,1 and 6.\n\n\\# update-rc.d sshd defaults          \\# Activate sshd with the default runlevels\n# update-rc.d sshd start 20 2 3 4 5 . stop 20 0 1 6 .  \\# With explicit arguments\n# update-rc.d -f sshd remove         \\# Disable sshd for all runlevels\n# shutdown -h now (or # poweroff)    \\# Shutdown and halt the system\n\n### FreeBSD\n\nThe BSD boot approach is different from the SysV, there are no runlevels. The final boot state (single user, with or without X) is configured in `/etc/ttys`. All OS scripts are located in `/etc/rc.d/` and in `/usr/local/etc/rc.d/` for third-party applications. The activation of the service is configured in `/etc/rc.conf` and `/etc/rc.conf.local`. The default behavior is configured in `/etc/defaults/rc.conf`. The scripts responds at least to start|stop|status.\n\n\\# /etc/rc.d/sshd status\nsshd is running as pid 552.\n# shutdown now                       \\# Go into single-user mode\n# exit                               \\# Go back to multi-user mode\n# shutdown -p now                    \\# Shutdown and halt the system\n# shutdown -r now                    \\# Reboot\n\nThe process `init` can also be used to reach one of the following states level. For example `# init 6` for reboot.\n\n*   0       Halt and turn the power off (signal `USR2`)\n*   1       Go to single-user mode (signal `TERM`)\n*   6       Reboot the machine (signal `INT`)\n*   c       Block further logins (signal `TSTP`)\n*   q       Rescan the ttys(5) file (signal `HUP`)\n\n### Windows\n\nStart and stop a service with either the `service name` or `\"service description\"` (shown in the Services Control Panel) as follows:\n\nnet stop WSearch\nnet start WSearch                    \\# start search service\nnet stop \"Windows Search\"\nnet start \"Windows Search\"           \\# same as above using descr.\n\nReset root password\n-------------------\n\n### Linux method 1\n\nAt the boot loader (lilo or grub), enter the following boot option:\n\ninit=/bin/sh\n\nThe kernel will mount the root partition and `init` will start the bourne shell instead of `rc` and then a runlevel. Use the command `passwd` at the prompt to change the password and then reboot. Forget the single user mode as you need the password for that.  \nIf, after booting, the root partition is mounted read only, remount it rw:\n\n\\# mount -o remount,rw /\n# passwd                             \\# or delete the root password (/etc/shadow)\n# sync; mount -o remount,ro /        \\# sync before to remount read only\n# reboot\n\n### FreeBSD method 1\n\nOn FreeBSD, boot in single user mode, remount / rw and use passwd. You can select the single user mode on the boot menu (option 4) which is displayed for 10 seconds at startup. The single user mode will give you a root shell on the / partition.\n\n\\# mount -u /; mount -a               \\# will mount / rw\n# passwd\n# reboot\n\n### Unixes and FreeBSD and Linux method 2\n\nOther Unixes might not let you go away with the simple init trick. The solution is to mount the root partition from an other OS (like a rescue CD) and change the password on the disk.\n\n*   Boot a live CD or installation CD into a rescue mode which will give you a shell.\n*   Find the root partition with fdisk e.g. fdisk /dev/sda\n*   Mount it and use chroot:\n\n\\# mount -o rw /dev/ad4s3a /mnt\n# chroot /mnt                        \\# chroot into /mnt\n# passwd\n# reboot\n\nKernel modules\n--------------\n\n### Linux\n\n\\# lsmod                              \\# List all modules loaded in the kernel\n# modprobe isdn                      \\# To load a module (here isdn)\n\n### FreeBSD\n\n\\# kldstat                            \\# List all modules loaded in the kernel\n# kldload crypto                     \\# To load a module (here crypto)\n\nCompile Kernel\n--------------\n\n### Linux\n\n\\# cd /usr/src/linux\n# make mrproper                      \\# Clean everything, including config files\n# make oldconfig                     \\# Reuse the old .config if existent\n# make menuconfig                    \\# or xconfig (Qt) or gconfig (GTK)\n# make                               \\# Create a compressed kernel image\n# make modules                       \\# Compile the modules\n# make modules\\_install               \\# Install the modules\n# make install                       \\# Install the kernel\n# reboot\n\n### FreeBSD\n\nOptionally update the source tree (in `/usr/src`) with csup (as of FreeBSD 6.2 or later):\n\n\\# csup <supfile>\n\nI use the following supfile:\n\n\\*default host=cvsup5.FreeBSD.org  # www.freebsd.org/handbook/cvsup.html#CVSUP-MIRRORS\n\\*default prefix=/usr \n\\*default base=/var/db\n\\*default release=cvs delete tag=RELENG\\_7\nsrc-all\n\nTo modify and rebuild the kernel, copy the generic configuration file to a new name and edit it as needed (you can also edit the file `GENERIC` directly). To restart the build after an interruption, add the option `NO_CLEAN=YES` to the make command to avoid cleaning the objects already build.\n\n\\# cd /usr/src/sys/i386/conf/\n# cp GENERIC MYKERNEL\n# cd /usr/src\n# make buildkernel KERNCONF=MYKERNEL\n# make installkernel KERNCONF=MYKERNEL\n\nTo rebuild the full OS:\n\n\\# make buildworld                    \\# Build the full OS but not the kernel\n# make buildkernel                   \\# Use KERNCONF as above if appropriate\n# make installkernel\n# reboot\n# mergemaster -p                     \\# Compares only files known to be essential\n# make installworld\n# mergemaster -i -U                  \\# Update all configurations and other files\n# reboot\n\nFor small changes in the source you can use NO\\_CLEAN=yes to avoid rebuilding the whole tree.\n\n\\# make buildworld NO\\_CLEAN=yes       \\# Don't delete the old objects\n# make buildkernel KERNCONF=MYKERNEL NO\\_CLEAN=yes\n\nRepair grub\n-----------\n\nSo you broke grub? Boot from a live cd, \\[find your linux partition under `/dev` and use `fdisk` to find the linux partion\\] mount the linux partition, add /proc and /dev and use `grub-install /dev/xyz`. Suppose linux lies on `/dev/sda6`:\n\n\\# mount /dev/sda6 /mnt               \\# mount the linux partition on /mnt\n# mount --bind /proc /mnt/proc       \\# mount the proc subsystem into /mnt\n# mount --bind /dev /mnt/dev         \\# mount the devices into /mnt\n# chroot /mnt                        \\# change root to the linux partition\n# grub-install /dev/sda              \\# reinstall grub with your old settings\n\nMisc\n----\n\nDisable OSX virtual memory (repeat with `load` to re-enable). Faster system, but a little risky.\n\n\\# sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.dynamic\\_pager.plist\n# sleep 3600; pmset sleepnow           \\# go to standby in one hour (OSX)\n# defaults write -g com.apple.mouse.scaling -float 8\n                                     \\# OSX mouse acceleration (use -1 to reverse)\n\nProcesses\n=========\n\n[Listing](#ps) | [Priority](#nice) | [Background/Foreground](#bgfg) | [Top](#top) | [Kill](#kill)\n\nListing and PIDs\n----------------\n\nEach process has a unique number, the PID. A list of all running process is retrieved with `ps`.\n\n\\# ps -auxefw                         \\# Extensive list of all running process\n\nHowever more typical usage is with a pipe or with `pgrep` (for OS X install `proctools` from [MacPorts](#macports)):\n\n\\# ps axww | grep cron\n  586  ??  Is     0:01.48 /usr/sbin/cron -s\n# ps axjf                            \\# All processes in a tree format (Linux)\n# ps aux | grep 'ss\\[h\\]'              \\# Find all ssh pids without the grep pid\n# pgrep -l sshd                      \\# Find the PIDs of processes by (part of) name\n# echo $$                            \\# The PID of your shell\n# fuser -va 22/tcp                   \\# List processes using port 22 (Linux)\n# pmap PID                           \\# Memory map of process (hunt memory leaks) (Linux)\n# fuser -va /home                    \\# List processes accessing the /home partition\n# strace df                          \\# Trace system calls and signals\n# truss df                           \\# same as above on FreeBSD/Solaris/Unixware\n\nPriority\n--------\n\nChange the priority of a running process with `renice`. **Negative numbers have a higher priority**, the lowest is -20 and \"nice\" have a positive value.\n\n\\# renice -5 586                      \\# Stronger priority\n586: old priority 0, new priority -5\n\nStart the process with a defined priority with `nice`. Positive is \"nice\" or weak, negative is strong scheduling priority. Make sure you know if `/usr/bin/nice` or the shell built-in is used (check with `# which nice`).\n\n\\# nice -n -5 top                     \\# Stronger priority (/usr/bin/nice)\n# nice -n 5 top                      \\# Weaker priority (/usr/bin/nice)\n# nice +5 top                        \\# tcsh builtin nice (same as above!)\n\nWhile nice changes the CPU scheduler, an other useful command `ionice` will schedule the disk IO. This is very useful for intensive IO application (e.g. compiling). You can select a class (idle - best effort - real time), the man page is short and well explained.\n\n\\# ionice c3 -p123                    \\# set idle class for pid 123 (Linux only)\n# ionice -c2 -n0 firefox             \\# Run firefox with best effort and high priority\n# ionice -c3 -p$$                    \\# Set the actual shell to idle priority\n\nThe last command is very useful to compile (or debug) a large project. Every command launched from this shell will have a lover priority. `$$` is your shell pid (try echo $$).  \nFreeBSD uses `idprio/rtprio` (0 = max priority, 31 = most idle):\n\n\\# idprio 31 make                     \\# compile in the lowest priority\n# idprio 31 -1234                    \\# set PID 1234 with lowest priority\n# idprio -t -1234                    \\# -t removes any real time/idle priority\n\nBackground/Foreground\n---------------------\n\nWhen started from a shell, processes can be brought in the background and back to the foreground with \\[Ctrl\\]-\\[Z\\] (^Z), `bg` and `fg`. List the processes with `jobs`. When needed detach from the terminal with `disown`.\n\n\\# ping cb.vu > ping.log\n^Z                                   \\# ping is suspended (stopped) with \\[Ctrl\\]-\\[Z\\] \n# bg                                 \\# put in background and continues running\n# jobs -l                            \\# List processes in background\n\\[1\\]  - 36232 Running                       ping cb.vu > ping.log\n\\[2\\]  + 36233 Suspended (tty output)        top\n# fg %2                              \\# Bring process 2 back in foreground\n\n\\# make                               \\# start a long compile job but need to leave the terminal\n^Z                                   \\# suspended (stopped) with \\[Ctrl\\]-\\[Z\\] \n# bg                                 \\# put in background and continues running\n# disown -h %1                       \\# detatch process from terminal, won't be killed at logout\n\nNo straight forward way to re-attach the process to a new terminal, try [reptyr](https://github.com/nelhage/reptyr) (Linux).  \nUse `nohup` to start a process which has to keep running when the shell is closed (immune to hangups).\n\n\\# nohup ping -i 60 > ping.log &\n\nTop\n---\n\nThe program `top` displays running information of processes. See also the program `htop` from htop.sourceforge.net (a more powerful version of top) which runs on Linux and FreeBSD (`ports/sysutils/htop/`). While top is running press the key h for a help overview. Useful keys are:\n\n*   **u \\[user name\\]** To display only the processes belonging to the user. Use + or blank to see all users\n*   **k \\[pid\\]** Kill the process with pid.\n*   **1** To display all processors statistics (Linux only)\n*   **R** Toggle normal/reverse sort.\n\nSignals/Kill\n------------\n\nTerminate or send a signal with `kill` or `killall`.\n\n\\# ping -i 60 cb.vu > ping.log &\n\\[1\\] 4712\n# kill -s TERM 4712                  \\# same as kill -15 4712\n# killall -1 httpd                   \\# Kill HUP processes by exact name\n# pkill -9 http                      \\# Kill TERM processes by (part of) name\n# pkill -TERM -u www                 \\# Kill TERM processes owned by www\n# fuser -k -TERM -m /home            \\# Kill every process accessing /home (to umount)\n\nImportant signals are:\n\n*   1       `HUP` (hang up)\n*   2       `INT` (interrupt)\n*   3       `QUIT` (quit)\n*   9       `KILL` (non-catchable, non-ignorable kill)\n*   15     `TERM` (software termination signal)\n\nFile System\n===========\n\n[Disk info](#diskinfo) | [Boot](#fsboot) | [Disk usage](#mountpoints) | [Opened files](#filesstat) | [Mount/remount](#mountcd) | [Mount SMB](#mountsmb) | [Mount image](#mountimg) | [Burn ISO](#burniso) | [Create image](#createimg) | [Memory disk](#creatememdisk) | [Disk performance](#diskperf)\n\nPermissions\n-----------\n\nChange permission and ownership with `chmod` and `chown`. The default umask can be changed for all users in /etc/profile for Linux or /etc/login.conf for FreeBSD. The default umask is usually 022. The umask is subtracted from 777, thus umask 022 results in a permission 0f 755.\n\n1 --x execute                        \\# Mode 764 = exec/read/write | read/write | read\n2 -w- write                          \\# For:       |--  Owner  --|   |- Group-|   |Oth|\n4 r-- read\n  ugo=a                              u=user, g=group, o=others, a=everyone\n\n\\# chmod \\[OPTION\\] MODE\\[,MODE\\] FILE    \\# MODE is of the form \\[ugoa\\]\\*(\\[-+=\\](\\[rwxXst\\]))\n# chmod 640 /var/log/maillog         \\# Restrict the log -rw-r-----\n# chmod u=rw,g=r,o= /var/log/maillog \\# Same as above\n# chmod -R o-r /home/\\*               \\# Recursive remove other readable for all users\n# chmod u+s /path/to/prog            \\# Set SUID bit on executable (know what you do!)\n# find / -perm -u+s -print           \\# Find all programs with the SUID bit\n# chown user:group /path/to/file     \\# Change the user and group ownership of a file\n# chgrp group /path/to/file          \\# Change the group ownership of a file\n# chmod 640 \\`find ./ -type f -print\\` \\# Change permissions to 640 for all files\n# chmod 751 \\`find ./ -type d -print\\` \\# Change permissions to 751 for all directories\n\nDisk information\n----------------\n\n\\# diskinfo -v /dev/ad2               \\# information about disk (sector/size) FreeBSD\n# hdparm -I /dev/sda                 \\# information about the IDE/ATA disk (Linux)\n# fdisk /dev/ad2                     \\# Display and manipulate the partition table\n# smartctl -a /dev/ad2               \\# Display the disk SMART info\n\nBoot\n----\n\n### FreeBSD\n\nTo boot an old kernel if the new kernel doesn't boot, stop the boot at during the count down.\n\n\\# unload\n# load kernel.old\n# boot\n\nSystem mount points/Disk usage\n------------------------------\n\n\\# mount | column -t                  \\# Show mounted file-systems on the system\n# df                                 \\# display free disk space and mounted devices\n# cat /proc/partitions               \\# Show all registered partitions (Linux)\n\n### Disk usage\n\n\\# du -sh \\*                           \\# Directory sizes as listing\n# du -csh                            \\# Total directory size of the current directory\n# du -ks \\* | sort -n -r              \\# Sort everything by size in kilobytes\n# ls -lSr                            \\# Show files, biggest last\n\nWho has which files opened\n--------------------------\n\nThis is useful to find out which file is blocking a partition which has to be unmounted and gives a typical error of:\n\n\\# umount /home/\numount: unmount of /home             \\# umount impossible because a file is locking home\n   failed: Device busy\n\n### FreeBSD and most Unixes\n\n\\# fstat -f /home                     \\# for a mount point\n# fstat -p PID                       \\# for an application with PID\n# fstat -u user                      \\# for a user name\n\nFind opened log file (or other opened files), say for Xorg:\n\n\\# ps ax | grep Xorg | awk '{print $1}'\n1252\n# fstat -p 1252\nUSER     CMD          PID   FD MOUNT      INUM MODE         SZ|DV R/W\nroot     Xorg        1252 root /             2 drwxr-xr-x     512  r\nroot     Xorg        1252 text /usr     216016 -rws--x--x  1679848 r\nroot     Xorg        1252    0 /var     212042 -rw-r--r--   56987  w\n\nThe file with inum 212042 is the only file in /var:\n\n\\# find -x /var -inum 212042\n/var/log/Xorg.0.log\n\n### Linux\n\nFind opened files on a mount point with `fuser` or `lsof`:\n\n\\# fuser -m /home                     \\# List processes accessing /home\n# lsof /home\nCOMMAND   PID    USER   FD   TYPE DEVICE    SIZE     NODE NAME\ntcsh    29029 eedcoba  cwd    DIR   0,18   12288  1048587 /home/eedcoba (guam:/home)\nlsof    29140 eedcoba  cwd    DIR   0,18   12288  1048587 /home/eedcoba (guam:/home)\n\nAbout an application:\n\nps ax | grep Xorg | awk '{print $1}'\n3324\n# lsof -p 3324\nCOMMAND   PID    USER   FD   TYPE DEVICE    SIZE    NODE NAME\nXorg    3324 root    0w   REG        8,6   56296      12492 /var/log/Xorg.0.log\n\nAbout a single file:\n\n\\# lsof /var/log/Xorg.0.log\nCOMMAND  PID USER   FD   TYPE DEVICE  SIZE  NODE NAME\nXorg    3324 root    0w   REG    8,6 56296 12492 /var/log/Xorg.0.log\n\nMount/remount a file system\n---------------------------\n\nFor example the cdrom. If listed in /etc/fstab:\n\n\\# mount /cdrom\n\nOr find the device in /dev/ or with dmesg\n\n### FreeBSD\n\n\\# mount -v -t cd9660 /dev/cd0c /mnt  \\# cdrom\n# mount\\_cd9660 /dev/wcd0c /cdrom     \\# other method\n# mount -v -t msdos /dev/fd0c /mnt   \\# floppy\n\nEntry in /etc/fstab:\n\n\\# Device                Mountpoint      FStype  Options         Dump    Pass#\n/dev/acd0               /cdrom          cd9660  ro,noauto       0       0\n\nTo let users do it:\n\n\\# sysctl vfs.usermount=1  \\# Or insert the line \"vfs.usermount=1\" in /etc/sysctl.conf\n\n### Linux\n\n\\# mount -t auto /dev/cdrom /mnt/cdrom   \\# typical cdrom mount command\n# mount /dev/hdc -t iso9660 -r /cdrom   \\# typical IDE\n# mount /dev/scd0 -t iso9660 -r /cdrom  \\# typical SCSI cdrom\n# mount /dev/sdc0 -t ntfs-3g /windows   \\# typical SCSI\n\nEntry in /etc/fstab:\n\n/dev/cdrom   /media/cdrom  subfs noauto,fs=cdfss,ro,procuid,nosuid,nodev,exec 0 0\n\n#### Mount a FreeBSD partition with Linux\n\nFind the partition number containing with fdisk, this is usually the root partition, but it could be an other BSD slice too. If the FreeBSD has many slices, they are the one not listed in the fdisk table, but visible in /dev/sda\\* or /dev/hda\\*.\n\n\\# fdisk /dev/sda                     \\# Find the FreeBSD partition\n/dev/sda3   \\*        5357        7905    20474842+  a5  FreeBSD\n# mount -t ufs -o ufstype=ufs2,ro /dev/sda3 /mnt\n/dev/sda10 = /tmp; /dev/sda11 /usr   \\# The other slices\n\n### Remount\n\nRemount a device without unmounting it. Necessary for fsck for example\n\n\\# mount -o remount,ro /              \\# Linux\n# mount -o ro -u /                   \\# FreeBSD\n\nCopy the raw data from a cdrom into an iso image (default 512 blocksize might cause problems):\n\n\\# dd if=/dev/cd0c of=file.iso bs=2048\n\n### Virtualbox\n\nAllow a share on the host:\n\n\\# VBoxManage sharedfolder add \"GuestName\" --name \"share\" --hostpath \"C:\\\\hostshare\"\n\nMount share on guest (linux, FreeBSD)\n\n\\# sudo mount -t vboxsf share /home/vboxshare \\# -o uid=1000,gid=1000 (as appropriate)\nshare /home/colin/share vboxsf defaults,uid=colin 0 0 \\# fstab entry\n\n### OSX\n\n\\# diskutil list                      \\# List the partitions of a disk\n# diskutil unmountDisk /dev/disk1    \\# Unmount an entire disk (all volumes)\n# chflags hidden ~/Documents/folder  \\# Hide folder (reverse with unhidden)\n\nAdd swap on-the-fly\n-------------------\n\nSuppose you need more swap (right now), say a 2GB file /swap2gb (Linux only).\n\n\\# dd if=/dev/zero of=/swap2gb bs=1024k count=2000\n# mkswap /swap2gb                    \\# create the swap area\n# swapon /swap2gb                    \\# activate the swap. It now in use\n# swapoff /swap2gb                   \\# when done deactivate the swap\n# rm /swap2gb\n\nMount an SMB share\n------------------\n\nSuppose we want to access the SMB share myshare on the computer smbserver, the address as typed on a Windows PC is \\\\\\\\smbserver\\\\myshare\\\\. We mount on /mnt/smbshare. Warning> cifs wants an IP or DNS name, not a Windows name.\n\n### Linux/OSX\n\n\\# smbclient -U user -I 192.168.16.229 -L //smbshare/    \\# List the shares\n# mount -t smbfs -o username=winuser //smbserver/myshare /mnt/smbshare\n# mount -t cifs -o username=winuser,password=winpwd //192.168.16.229/myshare /mnt/share\n\nMound Samba share through ssh tunnel\n\n\\# ssh -C -f -N -p 20022 -L 445:127.0.0.1:445 me@server  \\# connect on 20022, tunnel 445\n# mount -t smbfs //colin@localhost/colin ~/mnt\n# mount\\_smbfs //colin:mypassword@127.0.0.1/private /Volumes/private \\# I use this on OSX + ssh\n\nAdditionally with the package mount.cifs it is possible to store the credentials in a file, for example `/home/user/.smb`:\n\nusername=winuser\npassword=winpwd\n\nAnd mount as follow:\n\n\\# mount -t cifs -o credentials=/home/user/.smb //192.168.16.229/myshare /mnt/smbshare\n\n### FreeBSD\n\nUse -I to give the IP (or DNS name); smbserver is the Windows name.\n\n\\# smbutil view -I 192.168.16.229 //winuser@smbserver    \\# List the shares\n# mount\\_smbfs -I 192.168.16.229 //winuser@smbserver/myshare /mnt/smbshare\n\nMount an image\n--------------\n\n\\# hdiutil mount image.iso                               \\# OS X\n\n### Linux loop-back\n\n\\# mount -t iso9660 -o loop file.iso /mnt                \\# Mount a CD image\n# mount -t ext3 -o loop file.img /mnt                   \\# Mount an image with ext3 fs\n\n### FreeBSD\n\nWith memory device (do # kldload md.ko if necessary):\n\n\\# mdconfig -a -t vnode -f file.iso -u 0\n# mount -t cd9660 /dev/md0 /mnt\n# umount /mnt; mdconfig -d -u 0                         \\# Cleanup the md device\n\nOr with virtual node:\n\n\\# vnconfig /dev/vn0c file.iso; mount -t cd9660 /dev/vn0c /mnt\n# umount /mnt; vnconfig -u /dev/vn0c                    \\# Cleanup the vn device\n\n### Solaris and FreeBSD\n\nwith loop-back file interface or lofi:\n\n\\# lofiadm -a file.iso\n# mount -F hsfs -o ro /dev/lofi/1 /mnt\n# umount /mnt; lofiadm -d /dev/lofi/1                   \\# Cleanup the lofi device\n\nCreate and burn an ISO image\n----------------------------\n\nThis will copy the cd or DVD sector for sector. Without `conv=notrunc`, the image will be smaller if there is less content on the cd. See below and the [dd examples](#dd).\n\n\\# dd if=/dev/hdc of=/tmp/mycd.iso bs=2048 conv=notrunc\n\nUse mkisofs to create a CD/DVD image from files in a directory. To overcome the file names restrictions: -r enables the Rock Ridge extensions common to UNIX systems, -J enables Joliet extensions used by Microsoft systems. -L allows ISO9660 filenames to begin with a period.\n\n\\# mkisofs -J -L -r -V TITLE -o imagefile.iso /path/to/dir\n# hdiutil makehybrid -iso -joliet -o dir.iso dir/       \\# OS X\n\nOn FreeBSD, mkisofs is found in the ports in sysutils/cdrtools.\n\n### Burn a CD/DVD ISO image\n\n#### FreeBSD\n\nFreeBSD does not enable DMA on ATAPI drives by default. DMA is enabled with the sysctl command and the arguments below, or with /boot/loader.conf with the following entries:\n\nhw.ata.ata\\_dma=\"1\"\nhw.ata.atapi\\_dma=\"1\"\n\nUse `burncd` with an ATAPI device (`burncd` is part of the base system) and `cdrecord` (in sysutils/cdrtools) with a SCSI drive.\n\n\\# burncd -f /dev/acd0 data imagefile.iso fixate      \\# For ATAPI drive\n# cdrecord -scanbus                  \\# To find the burner device (like 1,0,0)\n# cdrecord dev=1,0,0 imagefile.iso\n\n#### Linux\n\nAlso use `cdrecord` with Linux as described above. Additionally it is possible to use the native ATAPI interface which is found with:\n\n\\# cdrecord dev=ATAPI -scanbus\n\nAnd burn the CD/DVD as above.\n\n#### dvd+rw-tools\n\nThe [dvd+rw-tools](http://fy.chalmers.se/%7Eappro/linux/DVD+RW/) package (FreeBSD: ports/sysutils/dvd+rw-tools) can do it all and includes `growisofs` to burn CDs or DVDs. The examples refer to the dvd device as `/dev/dvd` which could be a symlink to `/dev/scd0` (typical scsi on Linux) or `/dev/cd0` (typical FreeBSD) or `/dev/rcd0c` (typical NetBSD/OpenBSD character SCSI) or `/dev/rdsk/c0t1d0s2` (Solaris example of a character SCSI/ATAPI CD-ROM device). There is a nice documentation with examples on the [FreeBSD handbook chapter 18.7](http://www.freebsd.org/handbook/creating-dvds.html)http://www.freebsd.org/handbook/creating-dvds.html.\n\n                       \\# -dvd-compat closes the disk\n# growisofs -dvd-compat -Z /dev/dvd=imagefile.iso     \\# Burn existing iso image\n# growisofs -dvd-compat -Z /dev/dvd -J -R /p/to/data  \\# Burn directly\n\n### Convert a Nero .nrg file to .iso\n\nNero simply adds a 300Kb header to a normal iso image. This can be trimmed with dd.\n\n\\# dd bs=1k if=imagefile.nrg of=imagefile.iso skip=300\n\n### Convert a bin/cue image to .iso\n\nThe little [`bchunk` program](http://freshmeat.net/projects/bchunk/)http://freshmeat.net/projects/bchunk/ can do this. It is in the FreeBSD ports in sysutils/bchunk.\n\n\\# bchunk imagefile.bin imagefile.cue imagefile.iso\n\nCreate a file based image\n-------------------------\n\nFor example a partition of 1GB using the file /usr/vdisk.img. Here we use the vnode 0, but it could also be 1.\n\n### FreeBSD\n\n\\# dd if=/dev/random of=/usr/vdisk.img bs=1K count=1M\n# mdconfig -a -t vnode -f /usr/vdisk.img -u 0         \\# Creates device /dev/md1\n# bsdlabel -w /dev/md0\n# newfs /dev/md0c\n# mount /dev/md0c /mnt\n# umount /mnt; mdconfig -d -u 0; rm /usr/vdisk.img    \\# Cleanup the md device\n\nThe file based image can be automatically mounted during boot with an entry in /etc/rc.conf and /etc/fstab. Test your setup with `# /etc/rc.d/mdconfig start` (first delete the md0 device with `# mdconfig -d -u 0`).  \nNote however that this automatic setup will only work if the file image is NOT on the root partition. The reason is that the /etc/rc.d/mdconfig script is executed very early during boot and the root partition is still read-only. Images located outside the root partition will be mounted later with the script /etc/rc.d/mdconfig2.  \n/boot/loader.conf:\n\nmd\\_load=\"YES\"\n\n/etc/rc.conf:\n\n\\# mdconfig\\_md0=\"-t vnode -f /usr/vdisk.img\"          \\# /usr is not on the root partition\n\n/etc/fstab: (The 0 0 at the end is important, it tell fsck to ignore this device, as is does not exist yet)\n\n/dev/md0                /usr/vdisk      ufs     rw              0       0\n\nIt is also possible to increase the size of the image afterward, say for example 300 MB larger.\n\n\\# umount /mnt; mdconfig -d -u 0\n# dd if=/dev/zero bs=1m count=300 >> /usr/vdisk.img\n# mdconfig -a -t vnode -f /usr/vdisk.img -u 0\n# growfs /dev/md0\n# mount /dev/md0c /mnt                                \\# File partition is now 300 MB larger\n\n### Linux\n\n\\# dd if=/dev/zero of=/usr/vdisk.img bs=1024k count=1024\n# mkfs.ext3 /usr/vdisk.img\n# mount -o loop /usr/vdisk.img /mnt\n# umount /mnt; rm /usr/vdisk.img                      \\# Cleanup\n\n### Linux with losetup\n\n`/dev/zero` is much faster than `urandom`, but less secure for encryption.\n\n\\# dd if=/dev/urandom of=/usr/vdisk.img bs=1024k count=1024\n# losetup /dev/loop0 /usr/vdisk.img                   \\# Creates and associates /dev/loop0\n# mkfs.ext3 /dev/loop0\n# mount /dev/loop0 /mnt\n# losetup -a                                          \\# Check used loops\n# umount /mnt\n# losetup -d /dev/loop0                               \\# Detach\n# rm /usr/vdisk.img\n\nCreate a memory file system\n---------------------------\n\nA memory based file system is very fast for heavy IO application. How to create a 64 MB partition mounted on /memdisk:\n\n### FreeBSD\n\n\\# mount\\_mfs -o rw -s 64M md /memdisk\n# umount /memdisk; mdconfig -d -u 0                   \\# Cleanup the md device\nmd     /memdisk     mfs     rw,-s64M    0   0         \\# /etc/fstab entry\n\n### Linux\n\n\\# mount -t tmpfs -osize=64m tmpfs /memdisk\n\nDisk performance\n----------------\n\nRead and write a 1 GB file on partition ad4s3c (/home)\n\n\\# time dd if=/dev/ad4s3c of=/dev/null bs=1024k count=1000\n# time dd if=/dev/zero bs=1024k count=1000 of=/home/1Gb.file\n# hdparm -tT /dev/hda      \\# Linux only\n\nNetwork\n=======\n\n[Routing](#routing) | [Additional IP](#secondip) | [Change MAC](#changemac) | [Ports](#ports) | [Firewall](#firewall) | [IP Forward](#ipforward) | [NAT](#nat) | [DNS](#dns) | [DHCP](#dhcp) | [Traffic](#traffic) | [QoS](#trafficctrl) | [NIS](#nis) | [Netcat](#netcat)\n\nDebugging (See also [Traffic analysis)](#traffic)\n-------------------------------------------------\n\n### Linux\n\n\\# ethtool eth0              \\# Show the ethernet status (replaces mii-diag)\n# ethtool -s eth0 speed 100 duplex full \\# Force 100Mbit Full duplex\n# ethtool -s eth0 autoneg off \\# Disable auto negotiation\n# ethtool -p eth1           \\# Blink the ethernet led - very useful when supported\n# ip link show              \\# Display all interfaces on Linux (similar to ifconfig)\n# ip link set eth0 up       \\# Bring device up (or down). Same as \"ifconfig eth0 up\"\n# ip addr show              \\# Display all IP addresses on Linux (similar to ifconfig)\n# ip neigh show             \\# Similar to arp -a\n\n### Other OSes\n\n\\# ifconfig fxp0             \\# Check the \"media\" field on FreeBSD\n# arp -a                    \\# Check the router (or host) ARP entry (all OS)\n# ping cb.vu                \\# The first thing to try...\n# traceroute cb.vu          \\# Print the route path to destination\n# ifconfig fxp0 media 100baseTX mediaopt full-duplex \\# 100Mbit full duplex (FreeBSD)\n# netstat -s                \\# System-wide statistics for each network protocol\n\nAdditional commands which are not always installed per default but easy to find:\n\n\\# arping 192.168.16.254     \\# Ping on ethernet layer\n# tcptraceroute -f 5 cb.vu  \\# uses tcp instead of icmp to trace through firewalls\n\nRouting\n-------\n\n### Print routing table\n\n\\# route -n                  \\# Linux or use \"ip route\"\n# netstat -rn               \\# Linux, BSD and UNIX\n# route print               \\# Windows\n\n### Add and delete a route\n\n#### FreeBSD\n\n\\# route add 212.117.0.0/16 192.168.1.1\n# route delete 212.117.0.0/16\n# route add default 192.168.1.1\n\nAdd the route permanently in /etc/rc.conf\n\nstatic\\_routes=\"myroute\"\nroute\\_myroute=\"-net 212.117.0.0/16 192.168.1.1\"\n\n#### Linux\n\n\\# route add -net 192.168.20.0 netmask 255.255.255.0 gw 192.168.16.254\n# ip route add 192.168.20.0/24 via 192.168.16.254       \\# same as above with ip route\n# route add -net 192.168.20.0 netmask 255.255.255.0 dev eth0\n# route add default gw 192.168.51.254\n# ip route add default via 192.168.51.254 dev eth0      \\# same as above with ip route\n# route delete -net 192.168.20.0 netmask 255.255.255.0\n\n#### Solaris\n\n\\# route add -net 192.168.20.0 -netmask 255.255.255.0 192.168.16.254\n# route add default 192.168.51.254 1                    \\# 1 = hops to the next gateway\n# route change default 192.168.50.254 1\n\nPermanent entries are set in entry in `/etc/defaultrouter`.\n\n#### Windows\n\n\\# Route add 192.168.50.0 mask 255.255.255.0 192.168.51.253\n# Route add 0.0.0.0 mask 0.0.0.0 192.168.51.254\n\nUse add -p to make the route persistent.\n\nConfigure additional IP addresses\n---------------------------------\n\n### Linux\n\n\\# ifconfig eth0 192.168.50.254 netmask 255.255.255.0       \\# First IP\n# ifconfig eth0:0 192.168.51.254 netmask 255.255.255.0     \\# Second IP\n# ip addr add 192.168.50.254/24 dev eth0                   \\# Equivalent ip commands\n# ip addr add 192.168.51.254/24 dev eth0 label eth0:1\n\n### FreeBSD\n\n\\# ifconfig fxp0 inet 192.168.50.254/24                     \\# First IP\n# ifconfig fxp0 alias 192.168.51.254 netmask 255.255.255.0 \\# Second IP\n# ifconfig fxp0 -alias 192.168.51.254                      \\# Remove second IP alias\n\nPermanent entries in /etc/rc.conf\n\nifconfig\\_fxp0=\"inet 192.168.50.254  netmask 255.255.255.0\"\nifconfig\\_fxp0\\_alias0=\"192.168.51.254 netmask 255.255.255.0\"\n\n### Solaris\n\nCheck the settings with `ifconfig -a`\n\n\\# ifconfig hme0 plumb                                      \\# Enable the network card\n# ifconfig hme0 192.168.50.254 netmask 255.255.255.0 up    \\# First IP\n# ifconfig hme0:1 192.168.51.254 netmask 255.255.255.0 up  \\# Second IP\n\nChange MAC address\n------------------\n\nNormally you have to bring the interface down before the change. Don't tell me why you want to change the MAC address...\n\n\\# ifconfig eth0 down\n# ifconfig eth0 hw ether 00:01:02:03:04:05      \\# Linux\n# ifconfig fxp0 link 00:01:02:03:04:05          \\# FreeBSD\n# ifconfig hme0 ether 00:01:02:03:04:05         \\# Solaris\n# sudo ifconfig en0 ether 00:01:02:03:04:05     \\# OS X Tiger, Snow Leopard LAN\\*\n# sudo ifconfig en0 lladdr 00:01:02:03:04:05    \\# OS X Leopard\n\n\\*Typical wireless interface is `en1` and needs do disassociate from any network first ([osxdaily howto](http://osxdaily.com/2008/01/17/how-to-spoof-your-mac-address-in-mac-os-x/)).\n\n\\# echo \"alias airport='/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport'\"\\\\\n>> ~/.bash\\_profile         \\# or symlink to /usr/sbin\n# airport -z               \\# Disassociate from wireless networks\n# airport -I               \\# Get info from wireless network\n\nMany tools exist for Windows. For example [etherchange](http://ntsecurity.nu/toolbox/etherchange/)http://ntsecurity.nu/toolbox/etherchange. Or look for \"Mac Makeup\", \"smac\".\n\nPorts in use\n------------\n\nListening open ports:\n\n\\# netstat -an | grep LISTEN\n# lsof -i                  \\# Linux list all Internet connections\n# socklist                 \\# Linux display list of open sockets\n# sockstat -4              \\# FreeBSD application listing\n# netstat -anp --udp --tcp | grep LISTEN        \\# Linux\n# netstat -tup             \\# List active connections to/from system (Linux)\n# netstat -tupl            \\# List listening ports from system (Linux)\n# netstat -ano             \\# Windows\n\nFirewall\n--------\n\nCheck if a firewall is running (typical configuration only):\n\n### Linux\n\n\\# iptables -L -n -v                  \\# For status\nOpen the iptables firewall\n# iptables -P INPUT       ACCEPT     \\# Open everything\n# iptables -P FORWARD     ACCEPT\n# iptables -P OUTPUT      ACCEPT\n# iptables -Z                        \\# Zero the packet and byte counters in all chains\n# iptables -F                        \\# Flush all chains\n# iptables -X                        \\# Delete all chains\n\n### FreeBSD\n\n\\# ipfw show                          \\# For status\n# ipfw list 65535 \\# if answer is \"65535 deny ip from any to any\" the fw is disabled\n# sysctl net.inet.ip.fw.enable=0     \\# Disable\n# sysctl net.inet.ip.fw.enable=1     \\# Enable\n\nIP Forward for routing\n----------------------\n\n### Linux\n\nCheck and then enable IP forward with:\n\n\\# cat /proc/sys/net/ipv4/ip\\_forward  \\# Check IP forward 0=off, 1=on\n# echo 1 > /proc/sys/net/ipv4/ip\\_forward\n\nor edit /etc/sysctl.conf with:\n\nnet.ipv4.ip\\_forward = 1\n\n### FreeBSD\n\nCheck and enable with:\n\n\\# sysctl net.inet.ip.forwarding      \\# Check IP forward 0=off, 1=on\n# sysctl net.inet.ip.forwarding=1\n# sysctl net.inet.ip.fastforwarding=1\t\\# For dedicated router or firewall\nPermanent with entry in /etc/rc.conf:\ngateway\\_enable=\"YES\"                 \\# Set to YES if this host will be a gateway.\n\n### Solaris\n\n\\# ndd -set /dev/ip ip\\_forwarding 1   \\# Set IP forward 0=off, 1=on\n\nNAT Network Address Translation\n-------------------------------\n\n### Linux\n\n\\# iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\t\\# to activate NAT\n# iptables -t nat -A PREROUTING -p tcp -d 78.31.70.238 --dport 20022 -j DNAT \\\\\n--to 192.168.16.44:22           \\# Port forward 20022 to internal IP port ssh\n# iptables -t nat -A PREROUTING -p tcp -d 78.31.70.238 --dport 993:995 -j DNAT \\\\\n--to 192.168.16.254:993-995     \\# Port forward of range 993-995\n# ip route flush cache\n# iptables -L -t nat            \\# Check NAT status\n\nDelete the port forward with -D instead of -A. The program [netstat-nat](http://tweegy.nl/projects/netstat-nat/)http://tweegy.nl/projects/netstat-nat is very useful to track connections (it uses `/proc/net/ip_conntrack` or `/proc/net/nf_conntrack`).\n\n\\# netstat-nat -n                \\# show all connections with IPs\n\n### FreeBSD\n\n\\# natd -s -m -u -dynamic -f /etc/natd.conf -n fxp0\nOr edit /etc/rc.conf with:\nfirewall\\_enable=\"YES\"           \\# Set to YES to enable firewall functionality\nfirewall\\_type=\"open\"            \\# Firewall type (see /etc/rc.firewall)\nnatd\\_enable=\"YES\"               \\# Enable natd (if firewall\\_enable == YES).\nnatd\\_interface=\"tun0\"           \\# Public interface or IP address to use.\nnatd\\_flags=\"-s -m -u -dynamic -f /etc/natd.conf\"\n\nPort forward with:\n\n\\# cat /etc/natd.conf \nsame\\_ports yes\nuse\\_sockets yes\nunregistered\\_only\n# redirect\\_port tcp insideIP:2300-2399 3300-3399  \\# port range\nredirect\\_port udp 192.168.51.103:7777 7777\n\nDNS\n---\n\nOn Unix the DNS entries are valid for all interfaces and are stored in /etc/resolv.conf. The domain to which the host belongs is also stored in this file. A minimal configuration is:\n\nnameserver 78.31.70.238\nsearch sleepyowl.net intern.lab\ndomain sleepyowl.net\n\nCheck the system domain name with:\n\n\\# hostname -d                        \\# Same as dnsdomainname\n\n### Windows\n\nOn Windows the DNS are configured per interface. To display the configured DNS and to flush the DNS cache use:\n\n\\# ipconfig /?                        \\# Display help\n# ipconfig /all                      \\# See all information including DNS\n\n### Flush DNS\n\nFlush the OS DNS cache, some application using their own cache (e.g. Firefox) and will be unaffected.\n\n\\# /etc/init.d/nscd restart           \\# Restart nscd if used - Linux/BSD/Solaris\n# lookupd -flushcache                \\# OS X Tiger\n# dscacheutil -flushcache            \\# OS X Leopard and newer\n# ipconfig /flushdns                 \\# Windows\n\n### Forward queries\n\nDig is you friend to test the DNS settings. For example the public DNS server `213.133.105.2 ns.second-ns.de` can be used for testing. See from which server the client receives the answer (simplified answer).\n\n\\# dig sleepyowl.net\nsleepyowl.net.          600     IN      A       78.31.70.238\n;; SERVER: 192.168.51.254#53(192.168.51.254)\n\nThe router 192.168.51.254 answered and the response is the A entry. Any entry can be queried and the DNS server can be selected with @:\n\n\\# dig MX google.com\n# dig @127.0.0.1 NS sun.com          \\# To test the local server\n# dig @204.97.212.10 NS MX heise.de  \\# Query an external server\n# dig AXFR @ns1.xname.org cb.vu      \\# Get the full zone (zone transfer)\n\nThe program host is also powerful.\n\n\\# host -t MX cb.vu                   \\# Get the mail MX entry\n# host -t NS -T sun.com              \\# Get the NS record over a TCP connection\n# host -a sleepyowl.net              \\# Get everything\n\n### Reverse queries\n\nFind the name belonging to an IP address (in-addr.arpa.). This can be done with `dig`, `host` and `nslookup`:\n\n\\# dig -x 78.31.70.238\n# host 78.31.70.238\n# nslookup 78.31.70.238\n\n### /etc/hosts\n\nSingle hosts can be configured in the file /etc/hosts instead of running `named` locally to resolve the hostname queries. The format is simple, for example:\n\n78.31.70.238   sleepyowl.net   sleepyowl\n\nThe priority between hosts and a dns query, that is the name resolution order, can be configured in `/etc/nsswitch.conf` AND /etc/host.conf. The file also exists on Windows, it is usually in:\n\nC:\\\\WINDOWS\\\\SYSTEM32\\\\DRIVERS\\\\ETC\n\nDHCP\n----\n\n### Linux\n\nSome distributions (SuSE) use dhcpcd as client. The default interface is eth0.\n\n\\# dhcpcd -n eth0           \\# Trigger a renew (does not always work)\n# dhcpcd -k eth0           \\# release and shutdown\n\nThe lease with the full information is stored in:\n\n/var/lib/dhcpcd/dhcpcd-eth0.info\n\n### FreeBSD\n\nFreeBSD (and Debian) uses dhclient. To configure an interface (for example bge0) run:\n\n\\# dhclient bge0\n\nThe lease with the full information is stored in:\n\n/var/db/dhclient.leases.bge0\n\nUse\n\n/etc/dhclient.conf\n\nto prepend options or force different options:\n\n\\# cat /etc/dhclient.conf\ninterface \"rl0\" {\n    prepend domain-name-servers 127.0.0.1;\n    default domain-name \"sleepyowl.net\";\n    supersede domain-name \"sleepyowl.net\";\n}\n\n### Windows\n\nThe dhcp lease can be renewed with `ipconfig`:\n\n\\# ipconfig /renew          \\# renew all adapters\n# ipconfig /renew LAN      \\# renew the adapter named \"LAN\"\n# ipconfig /release WLAN   \\# release the adapter named \"WLAN\"\n\nYes it is a good idea to rename you adapter with simple names!\n\nTraffic analysis\n----------------\n\n[Bmon](http://people.suug.ch/%7Etgr/bmon/)http://people.suug.ch/~tgr/bmon/ is a small console bandwidth monitor and can display the flow on different interfaces.\n\n### Sniff with tcpdump\n\n\\# tcpdump -nl -i bge0 not port ssh and src \\\\(192.168.16.121 or 192.168.16.54\\\\)\n# tcpdump -n -i eth1 net 192.168.16.121           \\# select to/from a single IP\n# tcpdump -n -i eth1 net 192.168.16.0/24          \\# select traffic to/from a network\n# tcpdump -l > dump && tail -f dump               \\# Buffered output\n# tcpdump -i rl0 -w traffic.rl0                   \\# Write traffic headers in binary file\n# tcpdump -i rl0 -s 0 -w traffic.rl0              \\# Write traffic + payload in binary file\n# tcpdump -r traffic.rl0                          \\# Read from file (also for ethereal\n# tcpdump port 80                                 \\# The two classic commands\n# tcpdump host google.com\n# tcpdump -i eth0 -X port \\\\(110 or 143\\\\)          \\# Check if pop or imap is secure\n# tcpdump -n -i eth0 icmp                         \\# Only catch pings\n# tcpdump -i eth0 -s 0 -A port 80 | grep GET      \\# -s 0 for full packet -A for ASCII\n\nAdditional important options:\n\n*   `-A`     Print each packets in clear text (without header)\n*   `-X`     Print packets in hex and ASCII\n*   `-l`     Make stdout line buffered\n*   `-D`     Print all interfaces available\n\nOn Windows use windump from [www.winpcap.org](http://www.winpcap.org/). Use windump -D to list the interfaces.\n\n### Scan with nmap\n\n[Nmap](http://insecure.org/nmap/)http://insecure.org/nmap/ is a port scanner with OS detection, it is usually installed on most distributions and is also available for Windows. If you don't scan your servers, hackers do it for you...\n\n\\# nmap cb.vu               \\# scans all reserved TCP ports on the host\n# nmap -sP 192.168.16.0/24 \\# Find out which IP are used and by which host on 0/24\n# nmap -sS -sV -O cb.vu    \\# Do a stealth SYN scan with version and OS detection\nPORT      STATE  SERVICE             VERSION\n22/tcp    open   ssh                 OpenSSH 3.8.1p1 FreeBSD-20060930 (protocol 2.0)\n25/tcp    open   smtp                Sendmail smtpd 8.13.6/8.13.6\n80/tcp    open   http                Apache httpd 2.0.59 ((FreeBSD) DAV/2 PHP/4.\n\\[...\\]\nRunning: FreeBSD 5.X\nUptime 33.120 days (since Fri Aug 31 11:41:04 2007)\n\nOther non standard but useful tools are `hping` (www.hping.org) an IP packet assembler/analyzer and `fping` (fping.sourceforge.net). fping can check multiple hosts in a round-robin fashion.\n\nTraffic control (QoS)\n---------------------\n\nTraffic control manages the queuing, policing, scheduling, and other traffic parameters for a network. The following examples are simple practical uses of the Linux and FreeBSD capabilities to better use the available bandwidth.\n\n### Limit upload\n\nDSL or cable modems have a long queue to improve the upload throughput. However filling the queue with a fast device (e.g. ethernet) will dramatically decrease the interactivity. It is therefore useful to limit the device upload rate to match the physical capacity of the modem, this should greatly improve the interactivity. Set to about 90% of the modem maximal (cable) speed.\n\n#### Linux\n\nFor a 512 Kbit upload modem.\n\n\\# tc qdisc add dev eth0 root tbf rate 480kbit latency 50ms burst 1540\n# tc -s qdisc ls dev eth0                         \\# Status\n# tc qdisc del dev eth0 root                      \\# Delete the queue\n# tc qdisc change dev eth0 root tbf rate 220kbit latency 50ms burst 1540\n\n#### FreeBSD\n\nFreeBSD uses the `dummynet` traffic shaper which is configured with ipfw. Pipes are used to set limits the bandwidth in units of \\[K|M\\]{bit/s|Byte/s}, 0 means unlimited bandwidth. Using the same pipe number will reconfigure it. For example limit the upload bandwidth to 500 Kbit.\n\n\\# kldload dummynet                                \\# load the module if necessary\n# ipfw pipe 1 config bw 500Kbit/s                 \\# create a pipe with limited bandwidth\n# ipfw add pipe 1 ip from me to any               \\# divert the full upload into the pipe\n\n### Quality of service\n\n#### Linux\n\nPriority queuing with `tc` to optimize VoIP. See the full example on [voip-info.org](http://www.voip-info.org/wiki-QoS+Linux+with+HFS) or [www.howtoforge.com](http://www.howtoforge.com/voip_qos_traffic_shaping_iproute2_asterisk). Suppose VoIP uses udp on ports 10000:11024 and device eth0 (could also be ppp0 or so). The following commands define the QoS to three queues and force the VoIP traffic to queue 1 with QoS `0x1e` (all bits set). The default traffic flows into queue 3 and QoS _Minimize-Delay_ flows into queue 2.\n\n\\# tc qdisc add dev eth0 root handle 1: prio priomap 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 0\n# tc qdisc add dev eth0 parent 1:1 handle 10: sfq\n# tc qdisc add dev eth0 parent 1:2 handle 20: sfq\n# tc qdisc add dev eth0 parent 1:3 handle 30: sfq\n# tc filter add dev eth0 protocol ip parent 1: prio 1 u32 \\\\\n  match ip dport 10000 0x3C00 flowid 1:1          \\# use server port range\n  match ip dst 123.23.0.1 flowid 1:1              \\# or/and use server IP\n\nStatus and remove with\n\n\\# tc -s qdisc ls dev eth0                         \\# queue status\n# tc qdisc del dev eth0 root                      \\# delete all QoS\n\n#### Calculate port range and mask\n\nThe tc filter defines the port range with port and mask which you have to calculate. Find the 2^N _ending_ of the port range, deduce the range and convert to HEX. This is your mask. Example for 10000 -> 11024, the range is 1024.\n\n\\# 2^13 (8192) < 10000 < 2^14 (16384)              \\# ending is 2^14 = 16384\n# echo \"obase=16;(2^14)-1024\" | bc                \\# mask is 0x3C00\n\n#### FreeBSD\n\nThe max link bandwidth is 500Kbit/s and we define 3 queues with priority 100:10:1 for VoIP:ssh:all the rest.\n\n\\# ipfw pipe 1 config bw 500Kbit/s \n# ipfw queue 1 config pipe 1 weight 100\n# ipfw queue 2 config pipe 1 weight 10\n# ipfw queue 3 config pipe 1 weight 1\n# ipfw add 10 queue 1 proto udp dst-port 10000-11024\n# ipfw add 11 queue 1 proto udp dst-ip 123.23.0.1 \\# or/and use server IP\n# ipfw add 20 queue 2 dsp-port ssh\n# ipfw add 30 queue 3 from me to any              \\# all the rest\n\nStatus and remove with\n\n\\# ipfw list                                       \\# rules status\n# ipfw pipe list                                  \\# pipe status\n# ipfw flush                                      \\# deletes all rules but default\n\nNIS Debugging\n-------------\n\nSome commands which should work on a well configured NIS client:\n\n\\# ypwhich                  \\# get the connected NIS server name\n# domainname               \\# The NIS domain name as configured\n# ypcat group              \\# should display the group from the NIS server\n# cd /var/yp && make       \\# Rebuild the yp database\n# rpcinfo -p servername    \\# Report RPC services of the server\n\nIs ypbind running?\n\n\\# ps auxww | grep ypbind\n/usr/sbin/ypbind -s -m -S servername1,servername2\t\\# FreeBSD\n/usr/sbin/ypbind           \\# Linux\n# yppoll passwd.byname\nMap passwd.byname has order number 1190635041. Mon Sep 24 13:57:21 2007\nThe master server is servername.domain.net.\n\n### Linux\n\n\\# cat /etc/yp.conf\nypserver servername\ndomain domain.net broadcast\n\nNetcat\n------\n\n[Netcat](http://netcat.sourceforge.net/)http://netcat.sourceforge.net (nc) is better known as the \"network Swiss Army Knife\", it can manipulate, create or read/write TCP/IP connections. Here some useful examples, there are many more on the net, for example [g-loaded.eu\\[...\\]](http://www.g-loaded.eu/2006/11/06/netcat-a-couple-of-useful-examples)http://www.g-loaded.eu/2006/11/06/netcat-a-couple-of-useful-examples and [here](http://www.terminally-incoherent.com/blog/2007/08/07/few-useful-netcat-tricks)http://www.terminally-incoherent.com/blog/2007/08/07/few-useful-netcat-tricks.  \nYou might need to use the command `netcat` instead of `nc`. Also see the similar command [socat](http://www.dest-unreach.org/socat).\n\n### File transfer\n\nCopy a large folder over a raw tcp connection. The transfer is very quick (no protocol overhead) and you don't need to mess up with NFS or SMB or FTP or so, simply make the file available on the server, and get it from the client. Here 192.168.1.1 is the server IP address.\n\nserver# tar -cf - -C VIDEO\\_TS . | nc -l -p 4444         \\# Serve tar folder on port 4444\nclient# nc 192.168.1.1 4444 | tar xpf - -C VIDEO\\_TS     \\# Pull the file on port 4444\nserver# cat largefile | nc -l 5678                      \\# Server a single file\nclient# nc 192.168.1.1 5678 > largefile                 \\# Pull the single file\nserver# dd if=/dev/da0 | nc -l 4444                     \\# Server partition image\nclient# nc 192.168.1.1 4444 | dd of=/dev/da0            \\# Pull partition to clone\nclient# nc 192.168.1.1 4444 | dd of=da0.img             \\# Pull partition to file\n\n### Other hacks\n\nSpecially here, you must know what you are doing.\n\n#### Remote shell\n\nOption -e only on the Windows version? Or use [nc 1.10](http://download.insecure.org/stf/nc110.tgz).\n\n\\# nc -lp 4444 -e /bin/bash                        \\# Provide a remote shell (server backdoor)\n# nc -lp 4444 -e cmd.exe                          \\# remote shell for Windows\n\n#### Emergency web server\n\nServe a single file on port 80 in a loop.\n\n\\# while true; do nc -l -p 80 < unixtoolbox.xhtml; done\n\n#### Chat\n\nAlice and Bob can chat over a simple TCP socket. The text is transferred with the enter key.\n\nalice# nc -lp 4444\nbob  # nc 192.168.1.1 4444\n\nSSH SCP\n=======\n\n[Public key](#publickey) | [Fingerprint](#sshfingerprint) | [SCP](#scp) | [Tunneling](#sshtunnel)\n\nSee other tricks [25 ssh cmd](http://blog.urfix.com/25-ssh-commands-tricks/)http://blog.urfix.com/25-ssh-commands-tricks/\n\nPublic key authentication\n-------------------------\n\nConnect to a host without password using public key authentication. The idea is to append your public key to the authorized\\_keys2 file on the remote host. For this example let's **connect _host-client_ to _host-server_**, the key is generated on the client. With cygwin you might have to create your home directoy and the .ssh directory with `# mkdir -p /home/USER/.ssh`\n\n*   Use ssh-keygen to generate a key pair. `~/.ssh/id_dsa` is the private key, `~/.ssh/id_dsa.pub` is the public key.\n*   Copy only the public key to the server and append it to the file `~/.ssh/authorized_keys2` on your home on the server.\n\n\\# ssh-keygen -t dsa -N ''\n# cat ~/.ssh/id\\_dsa.pub | ssh you@host-server \"cat - >> ~/.ssh/authorized\\_keys2\"\n\n### Using the Windows client from ssh.com\n\nThe non commercial version of the ssh.com client can be downloaded the main ftp site: [ftp.ssh.com/pub/ssh/](http://ftp.ssh.com/pub/ssh/). Keys generated by the ssh.com client need to be converted for the OpenSSH server. This can be done with the ssh-keygen command.\n\n*   Create a key pair with the ssh.com client: Settings - User Authentication - Generate New....\n*   I use Key type DSA; key length 2048.\n*   Copy the public key generated by the ssh.com client to the server into the ~/.ssh folder.\n*   The keys are in C:\\\\Documents and Settings\\\\%USERNAME%\\\\Application Data\\\\SSH\\\\UserKeys.\n*   Use the ssh-keygen command on the server to convert the key:\n    \n    \\# cd ~/.ssh\n    # ssh-keygen -i -f keyfilename.pub >> authorized\\_keys2\n    \n\n_Notice:_ We used a DSA key, RSA is also possible. The key is not protected by a password.\n\n### Using putty for Windows\n\n[Putty](http://www.chiark.greenend.org.uk/%7Esgtatham/putty/download.html)http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html is a simple and free ssh client for Windows.\n\n*   Create a key pair with the puTTYgen program.\n*   Save the public and private keys (for example into C:\\\\Documents and Settings\\\\%USERNAME%\\\\.ssh).\n*   Copy the public key to the server into the ~/.ssh folder:\n    \n    \\# scp .ssh/puttykey.pub root@192.168.51.254:.ssh/\n    \n*   Use the ssh-keygen command on the server to convert the key for OpenSSH:\n    \n    \\# cd ~/.ssh\n    # ssh-keygen -i -f puttykey.pub >> authorized\\_keys2\n    \n*   Point the private key location in the putty settings: Connection - SSH - Auth\n\nCheck fingerprint\n-----------------\n\nAt the first login, ssh will ask if the unknown host with the fingerprint has to be stored in the known hosts. To avoid a man-in-the-middle attack the administrator of the server can send you the server fingerprint which is then compared on the first login. Use `ssh-keygen -l` to get the fingerprint (on the server):\n\n\\# ssh-keygen -l -f /etc/ssh/ssh\\_host\\_rsa\\_key.pub      \\# For RSA key\n2048 61:33:be:9b:ae:6c:36:31:fd:83:98:b7:99:2d:9f:cd /etc/ssh/ssh\\_host\\_rsa\\_key.pub\n# ssh-keygen -l -f /etc/ssh/ssh\\_host\\_dsa\\_key.pub      \\# For DSA key (default)\n2048 14:4a:aa:d9:73:25:46:6d:0a:48:35:c7:f4:16:d4:ee /etc/ssh/ssh\\_host\\_dsa\\_key.pub\n\nNow the client connecting to this server can verify that he is connecting to the right server:\n\n\\# ssh linda\nThe authenticity of host 'linda (192.168.16.54)' can't be established.\nDSA key fingerprint is 14:4a:aa:d9:73:25:46:6d:0a:48:35:c7:f4:16:d4:ee.\nAre you sure you want to continue connecting (yes/no)? yes\n\nSecure file transfer\n--------------------\n\nSome simple commands:  \n\n\\# scp file.txt host-two:/tmp\n# scp joe@host-two:/www/\\*.html /www/tmp\n# scp -r joe@host-two:/www /www/tmp\n\nIn Konqueror or Midnight Commander it is possible to access a remote file system with the address **fish://user@gate**. However the implementation is very slow.  \nFurthermore it is possible to mount a remote folder with **sshfs** a file system client based on SCP. [See fuse sshfs](http://fuse.sourceforge.net/sshfs.html)http://fuse.sourceforge.net/sshfs.html.\n\nssh\\_exchange\\_identification: Connection closed by remote host\n\nWith this error try the following on the server:\n\necho 'SSHD: ALL' >> /etc/hosts.allow\n/etc/init.d/sshd restart\n\nTunneling\n---------\n\nSSH tunneling allows to forward or reverse forward a port over the SSH connection, thus securing the traffic and accessing ports which would otherwise be blocked. This only works with TCP. The general nomenclature for forward and reverse is (see also [ssh and NAT example](#sshnat)):\n\n\\# ssh -L localport:desthost:destport user@gate  \\# desthost as seen from the gate\n# ssh -R destport:desthost:localport user@gate  \\# forwards your localport to destination\n    \\# desthost:localport as seen from the client initiating the tunnel\n# ssh -X user@gate   \\# To force X forwarding\n\nThis will connect to gate and forward the local port to the host desthost:destport. Note desthost is the destination host _as seen by the gate_, so if the connection is to the gate, then desthost is localhost. More than one port forward is possible.\n\n### Direct forward on the gate\n\nLet say we want to access the CVS (port 2401) and http (port 80) which are running on the gate. This is the simplest example, desthost is thus localhost, and we use the port 8080 locally instead of 80 so we don't need to be root. Once the ssh session is open, both services are accessible on the local ports.\n\n\\# ssh -L 2401:localhost:2401 -L 8080:localhost:80 user@gate\n\n### Netbios and remote desktop forward to a second server\n\nLet say a Windows smb server is behind the gate and is not running ssh. We need access to the smb share and also remote desktop to the server.\n\n\\# ssh -L 139:smbserver:139 -L 3388:smbserver:3389 user@gate\n\nThe smb share can now be accessed with \\\\\\\\127.0.0.1\\\\, but only if the local share is disabled, because _the local share is listening on port 139_.  \nIt is possible to keep the local share enabled, for this we need to create a new virtual device with a new IP address for the tunnel, the smb share will be connected over this address. Furthermore _the local RDP is already listening on 3389_, so we choose 3388. For this example let's use a virtual IP of 10.1.1.1.  \n\n*   With putty use Source port=10.1.1.1:139. It is possible to create multiple loop devices and tunnel. On Windows 2000, only putty worked for me. On Windows Vista also forward the port 445 in addition to the port 139. Also on Vista the patch KB942624 prevents the port 445 to be forwarded, so I had to uninstall this path in Vista.\n*   With the ssh.com client, disable \"Allow local connections only\". Since ssh.com will bind to all addresses, only a single share can be connected.\n\nNow create the loopback interface with IP 10.1.1.1:\n\n*   \\# System->Control Panel->Add Hardware # Yes, Hardware is already connected # Add a new hardware device (at bottom).\n*   \\# Install the hardware that I manually select # Network adapters # Microsoft , Microsoft Loopback Adapter.\n*   Configure the IP address of the fake device to 10.1.1.1 mask 255.255.255.0, no gateway.\n*   advanced->WINS, Enable LMHosts Lookup; Disable NetBIOS over TCP/IP.\n*   \\# Enable Client for Microsoft Networks. # Disable File and Printer Sharing for Microsoft Networks.\n\nI HAD to reboot for this to work. Now connect to the smb share with \\\\\\\\10.1.1.1 and remote desktop to 10.1.1.1:3388.\n\n#### Debug\n\nIf it is not working:\n\n*   Are the ports forwarded: netstat -an? Look at 0.0.0.0:139 or 10.1.1.1:139\n*   Does telnet 10.1.1.1 139 connect?\n*   You need the checkbox \"Local ports accept connections from other hosts\".\n*   Is \"File and Printer Sharing for Microsoft Networks\" disabled on the loopback interface?\n\n### Connect two clients behind NAT\n\nSuppose two clients are behind a NAT gateway and client cliadmin has to connect to client cliuser (the destination), both can login to the gate with ssh and are running Linux with sshd. You don't need root access anywhere as long as the ports on gate are above 1024. We use 2022 on gate. Also since the gate is used locally, the option GatewayPorts is not necessary.  \nOn client cliuser (from destination to gate):\n\n\\# ssh -R 2022:localhost:22 user@gate            \\# forwards client 22 to gate:2022\n\nOn client cliadmin (from host to gate):\n\n\\# ssh -L 3022:localhost:2022 admin@gate         \\# forwards client 3022 to gate:2022\n\nNow the admin can connect directly to the client cliuser with:\n\n\\# ssh -p 3022 admin@localhost                   \\# local:3022 -> gate:2022 -> client:22\n\n### Connect to VNC behind NAT\n\nSuppose a Windows client with VNC listening on port 5900 has to be accessed from behind NAT. On client cliwin to gate:\n\n\\# ssh -R 15900:localhost:5900 user@gate\n\nOn client cliadmin (from host to gate):\n\n\\# ssh -L 5900:localhost:15900 admin@gate\n\nNow the admin can connect directly to the client VNC with:\n\n\\# vncconnect -display :0 localhost\n\n### Dig a multi-hop ssh tunnel\n\nSuppose you can not reach a server directly with ssh, but only via multiple intermediate hosts (for example because of routing issues). Sometimes it is still necessary to get a direct client - server connection, for example to copy files with scp, or forward other ports like smb or vnc. One way to do this is to chain tunnels together to forward a port to the server along the hops. This \"carrier\" port only reaches its final destination on the last connection to the server.  \nSuppose we want to forward the ssh port from a client to a server over two hops. Once the tunnel is build, it is possible to connect to the server directly from the client (and also add an other port forward).\n\n#### Create tunnel in one shell\n\nclient -> host1 -> host2 -> server and dig tunnel 5678\n\nclient>\\# ssh -L5678:localhost:5678 host1        \\# 5678 is an arbitrary port for the tunnel\nhost\\_1>\\# ssh -L5678:localhost:5678 host2        \\# chain 5678 from host1 to host2\nhost\\_2>\\# ssh -L5678:localhost:22 server         \\# end the tunnel on port 22 on the server\n\n#### Use tunnel with an other shell\n\nclient -> server using tunnel 5678\n\n\\# ssh -p 5678 localhost                         \\# connect directly from client to  server\n# scp -P 5678 myfile localhost:/tmp/            \\# or copy a file directly using the tunnel\n# rsync -e 'ssh -p 5678' myfile localhost:/tmp/ \\# or rsync a file directly to the server\n\n### Autoconnect and keep alive script\n\nI use variations of the following script to keep a machine reacheable over a reverse ssh tunnel. The connection is automatically rebuilt if closed. You can add multiple `-L` or `-R` tunnels on one line.\n\n#!/bin/sh\nCOMMAND=\"ssh -N -f -g -R 3022:localhost:22 colin@cb.vu\"\npgrep -f -x \"$COMMAND\" > /dev/null 2>&1 || $COMMAND\nexit 0\n\n1 \\* \\* \\* \\* colin /home/colin/port\\_forward.sh     \\# crontab entry (here hourly)\n\nVPN with SSH\n============\n\nAs of version 4.3, OpenSSH can use the tun/tap device to encrypt a tunnel. This is very similar to other TLS based VPN solutions like OpenVPN. One advantage with SSH is that there is no need to install and configure additional software. Additionally the tunnel uses the SSH authentication like pre shared keys. The drawback is that the encapsulation is done over TCP which might result in poor performance on a slow link. Also the tunnel is relying on a single (fragile) TCP connection. This technique is very useful for a quick IP based VPN setup. There is no limitation as with the single TCP port forward, all layer 3/4 protocols like ICMP, TCP/UDP, etc. are forwarded over the VPN. In any case, the following options are needed in the sshd\\_conf file:\n\nPermitRootLogin yes\nPermitTunnel yes\n\nSingle P2P connection\n---------------------\n\nHere we are connecting two hosts, hclient and hserver with a peer to peer tunnel. The connection is _started from hclient_ to hserver and is done as root. The tunnel end points are 10.0.1.1 (server) and 10.0.1.2 (client) and we create a device tun5 (this could also be an other number). The procedure is very simple:\n\n*   Connect with SSH using the tunnel option -w\n*   Configure the IP addresses of the tunnel. Once on the server and once on the client.\n\n### Connect to the server\n\nConnection started on the client and commands are executed on the server.\n\n#### Server is on Linux\n\ncli># ssh -w5:5 root@hserver\nsrv># ifconfig tun5 10.0.1.1 netmask 255.255.255.252   \\# Executed on the server shell\n\n#### Server is on FreeBSD\n\ncli># ssh -w5:5 root@hserver\nsrv># ifconfig tun5 10.0.1.1 10.0.1.2                  \\# Executed on the server shell\n\n### Configure the client\n\nCommands executed on the client:\n\ncli># ifconfig tun5 10.0.1.2 netmask 255.255.255.252   \\# Client is on Linux\ncli># ifconfig tun5 10.0.1.2 10.0.1.1                  \\# Client is on FreeBSD\n\nThe two hosts are now connected and can transparently communicate with any layer 3/4 protocol using the tunnel IP addresses.\n\nConnect two networks\n--------------------\n\nIn addition to the p2p setup above, it is more useful to connect two private networks with an SSH VPN using two gates. Suppose for the example, netA is 192.168.51.0/24 and netB 192.168.16.0/24. The procedure is similar as above, we only need to add the routing. NAT must be activated on the private interface only if the gates are not the same as the default gateway of their network.  \n192.168.51.0/24 (netA)|gateA <-> gateB|192.168.16.0/24 (netB)  \n\n*   Connect with SSH using the tunnel option -w.\n*   Configure the IP addresses of the tunnel. Once on the server and once on the client.\n*   Add the routing for the two networks.\n*   If necessary, activate NAT on the private interface of the gate.\n\nThe setup is _started from gateA in netA_.\n\n### Connect from gateA to gateB\n\nConnection is started from gateA and commands are executed on gateB.\n\n#### gateB is on Linux\n\ngateA># ssh -w5:5 root@gateB\ngateB># ifconfig tun5 10.0.1.1 netmask 255.255.255.252 \\# Executed on the gateB shell\ngateB># route add -net 192.168.51.0 netmask 255.255.255.0 dev tun5\ngateB># echo 1 > /proc/sys/net/ipv4/ip\\_forward        \\# Only needed if not default gw\ngateB># iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\n#### gateB is on FreeBSD\n\ngateA># ssh -w5:5 root@gateB                          \\# Creates the tun5 devices\ngateB># ifconfig tun5 10.0.1.1 10.0.1.2               \\# Executed on the gateB shell\ngateB># route add 192.168.51.0/24 10.0.1.2\ngateB># sysctl net.inet.ip.forwarding=1               \\# Only needed if not default gw\ngateB># natd -s -m -u -dynamic -n fxp0                \\# see [NAT](#nat)\ngateA># sysctl net.inet.ip.fw.enable=1\n\n### Configure gateA\n\nCommands executed on gateA:\n\n#### gateA is on Linux\n\ngateA># ifconfig tun5 10.0.1.2 netmask 255.255.255.252\ngateA># route add -net 192.168.16.0 netmask 255.255.255.0 dev tun5\ngateA># echo 1 > /proc/sys/net/ipv4/ip\\_forward\ngateA># iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\n#### gateA is on FreeBSD\n\ngateA># ifconfig tun5 10.0.1.2 10.0.1.1\ngateA># route add 192.168.16.0/24 10.0.1.2\ngateA># sysctl net.inet.ip.forwarding=1\ngateA># natd -s -m -u -dynamic -n fxp0                \\# see [NAT](#nat)\ngateA># sysctl net.inet.ip.fw.enable=1\n\nThe two private networks are now transparently connected via the SSH VPN. The IP forward and NAT settings are only necessary if the gates are not the default gateways. In this case the clients would not know where to forward the response, and nat must be activated.\n\nRSYNC\n=====\n\nRsync can almost completely replace cp and scp, furthermore interrupted transfers are efficiently restarted. A trailing slash (and the absence thereof) has different meanings, the man page is good... Here some examples:  \nCopy the directories with full content:\n\n\\# rsync -a /home/colin/ /backup/colin/                \\# \"archive\" mode. e.g keep the same\n# rsync -a /var/ /var\\_bak/\n# rsync -aR --delete-during /home/user/ /backup/      \\# use relative (see below)\n# /opt/local/bin/rsync -azv --iconv=UTF-8-MAC,UTF-8 ~/Music/flac/ me@server:/dst/\n                           \\# convert filenames OSX UTF8 to Windows UTF8\n\nSame as before but over the network and with compression. Rsync uses SSH for the transport per default and will use the ssh key if they are set. Use \":\" as with SCP. A typical remote copy:\n\n\\# rsync -axSRzv /home/user/ user@server:/backup/user/ \\# Copy to remote\n# rsync -a 'user@server:My\\\\ Documents' My\\\\ Documents  \\# Quote AND escape spaces for the remote shell\n\nExclude any directory tmp within /home/user/ and keep the relative folders hierarchy, that is the remote directory will have the structure /backup/home/user/. This is typically used for backups.\n\n\\# rsync -azR --exclude=tmp/ /home/user/ user@server:/backup/\n\nUse port 20022 for the ssh connection:\n\n\\# rsync -az -e 'ssh -p 20022' /home/colin/ user@server:/backup/colin/\n\nUsing the rsync daemon (used with \"::\") is much faster, but not encrypted over ssh. The location of /backup is defined by the configuration in /etc/rsyncd.conf. The variable RSYNC\\_PASSWORD can be set to avoid the need to enter the password manually.\n\n\\# rsync -axSRz /home/ ruser@hostname::rmodule/backup/\n# rsync -axSRz ruser@hostname::rmodule/backup/ /home/    \\# To copy back\n\nSome important options:\n\n*   `-a, --archive`       archive mode; same as -rlptgoD (no -H)\n*   `-r, --recursive`       recurse into directories\n*   `-R, --relative`       use relative path names\n*   `-H, --hard-links`       preserve hard links\n*   `-S, --sparse`       handle sparse files efficiently\n*   `-x, --one-file-system`       don't cross file system boundaries\n*   `--exclude=PATTERN`       exclude files matching PATTERN\n*   `--delete-during`       receiver deletes during xfer, not before\n*   `--delete-after`       receiver deletes after transfer, not before\n\nRsync on Windows\n----------------\n\nRsync is available for Windows through cygwin or as stand-alone packaged in [cwrsync](http://sourceforge.net/projects/sereds/)http://sourceforge.net/projects/sereds. This is very convenient for automated backups. Install one of them (_not both_) and add the path to the Windows system variables: # Control Panel -> System -> tab Advanced, button Environment Variables. Edit the \"Path\" system variable and add the full path to the installed rsync, e.g. C:\\\\Program Files\\\\cwRsync\\\\bin or C:\\\\cygwin\\\\bin. This way the commands `rsync` and `ssh` are available in a Windows command shell.\n\n### Public key authentication\n\nRsync is automatically tunneled over SSH and thus uses the SSH authentication on the server. Automatic backups have to avoid a user interaction, for this the SSH public key authentication can be used and the rsync command will run without a password.  \nAll the following commands are executed within a Windows console. In a console (Start -> Run -> cmd) create and upload the key as described in [SSH](#ssh), change \"user\" and \"server\" as appropriate. If the file authorized\\_keys2 does not exist yet, simply copy id\\_dsa.pub to authorized\\_keys2 and upload it.\n\n\\# ssh-keygen -t dsa -N ''                   \\# Creates a public and a private key\n# rsync user@server:.ssh/authorized\\_keys2 . \\# Copy the file locally from the server\n# cat id\\_dsa.pub >> authorized\\_keys2        \\# Or use an editor to add the key\n# rsync authorized\\_keys2 user@server:.ssh/  \\# Copy the file back to the server\n# del authorized\\_keys2                      \\# Remove the local copy\n\nNow test it with (in one line):\n\nrsync -rv \"/cygdrive/c/Documents and Settings/%USERNAME%/My Documents/\" \\\\\n'user@server:My\\\\ Documents/'\n\n### Automatic backup\n\nUse a batch file to automate the backup and add the file in the scheduled tasks (Programs -> Accessories -> System Tools -> Scheduled Tasks). For example create the file backup.bat and replace user@server.\n\n@ECHO OFF\nREM rsync the directory My Documents\nSETLOCAL\nSET CWRSYNCHOME=C:\\\\PROGRAM FILES\\\\CWRSYNC\nSET CYGWIN=nontsec\nSET CWOLDPATH=%PATH%\nREM uncomment the next line when using cygwin\nSET PATH=%CWRSYNCHOME%\\\\BIN;%PATH%\necho Press Control-C to abort\nrsync -av \"/cygdrive/c/Documents and Settings/%USERNAME%/My Documents/\" \\\\\n'user@server:My\\\\ Documents/'\npause\n\nSUDO\n====\n\nSudo is a standard way to give users some administrative rights without giving out the root password. Sudo is very useful in a multi user environment with a mix of server and workstations. Simply call the command with sudo:\n\n\\# sudo /etc/init.d/dhcpd restart            \\# Run the rc script as root\n# sudo -u sysadmin whoami                   \\# Run cmd as an other user\n\nConfiguration\n-------------\n\nSudo is configured in `/etc/sudoers` and must only be edited with `visudo`. The basic syntax is (the lists are comma separated):\n\nuser hosts = (runas) commands          \\# In /etc/sudoers\n\n*   `users` one or more users or %group (like %wheel) to gain the rights\n*   `hosts` list of hosts (or ALL)\n*   `runas` list of users (or ALL) that the command rule can be run as. It is enclosed in ( )!\n*   `commands` list of commands (or ALL) that will be run as root or as (runas)\n\nAdditionally those keywords can be defined as alias, they are called User\\_Alias, Host\\_Alias, Runas\\_Alias and Cmnd\\_Alias. This is useful for larger setups. Here a sudoers example:\n\n\\# cat /etc/sudoers\n\\# Host aliases are subnets or hostnames.\nHost\\_Alias   DMZ     = 212.118.81.40/28\nHost\\_Alias   DESKTOP = work1, work2\n\n\\# User aliases are a list of users which can have the same rights\nUser\\_Alias   ADMINS  = colin, luca, admin\nUser\\_Alias   DEVEL   = joe, jack, julia\nRunas\\_Alias  DBA     = oracle,pgsql\n\n\\# Command aliases define the full path of a list of commands\nCmnd\\_Alias   SYSTEM  = /sbin/reboot,/usr/bin/kill,/sbin/halt,/sbin/shutdown,/etc/init.d/\nCmnd\\_Alias   PW      = /usr/bin/passwd \\[A-z\\]\\*, !/usr/bin/passwd root \\# Not root pwd!\nCmnd\\_Alias   DEBUG   = /usr/sbin/tcpdump,/usr/bin/wireshark,/usr/bin/nmap\n\n\\# The actual rules\nroot,ADMINS  ALL     = (ALL) NOPASSWD: ALL    \\# ADMINS can do anything w/o a password.\nDEVEL        DESKTOP = (ALL) NOPASSWD: ALL    \\# Developers have full right on desktops\nDEVEL        DMZ     = (ALL) NOPASSWD: DEBUG  \\# Developers can debug the DMZ servers.\n\n\\# User sysadmin can mess around in the DMZ servers with some commands.\nsysadmin     DMZ     = (ALL) NOPASSWD: SYSTEM,PW,DEBUG\nsysadmin     ALL,!DMZ = (ALL) NOPASSWD: ALL   \\# Can do anything outside the DMZ.\n%dba         ALL     = (DBA) ALL              \\# Group dba can run as database user.\n\n\\# anyone can mount/unmount a cd-rom on the desktop machines\nALL          DESKTOP = NOPASSWD: /sbin/mount /cdrom,/sbin/umount /cdrom\n\nEncrypt Files\n=============\n\nOpenSSL\n-------\n\n### A single file\n\nEncrypt and decrypt:\n\n\\# openssl aes-128-cbc -salt -in file -out file.aes\n# openssl aes-128-cbc -d -salt -in file.aes -out file\n\nNote that the file can of course be a tar archive.\n\n### tar and encrypt a whole directory\n\n\\# tar -cf - directory | openssl aes-128-cbc -salt -out directory.tar.aes      \\# Encrypt\n# openssl aes-128-cbc -d -salt -in directory.tar.aes | tar -x -f -            \\# Decrypt\n\n### tar zip and encrypt a whole directory\n\n\\# tar -zcf - directory | openssl aes-128-cbc -salt -out directory.tar.gz.aes  \\# Encrypt\n# openssl aes-128-cbc -d -salt -in directory.tar.gz.aes | tar -xz -f -        \\# Decrypt\n\n*   Use -k mysecretpassword after aes-128-cbc to avoid the interactive password request. However note that this is highly insecure.\n*   Use **aes-256-cbc** instead of **aes-128-cbc** to get even stronger encryption. This uses also more CPU.\n\nGPG\n---\n\n[GnuPG](http://gnupg.org/) is well known to encrypt and sign emails or any data. Furthermore gpg and also provides an advanced key management system. This section only covers files encryption, not email usage, signing or the Web-Of-Trust.  \nThe simplest encryption is with a symmetric cipher. In this case the file is encrypted with a password and anyone who knows the password can decrypt it, thus the keys are not needed. Gpg adds an extention \".gpg\" to the encrypted file names.\n\n\\# gpg -c file                        \\# Encrypt file with password\n# gpg file.gpg                       \\# Decrypt file (optionally -o otherfile)\n\n### Using keys\n\nFor more details see [GPG Quick Start](http://www.madboa.com/geek/gpg-quickstart)http://www.madboa.com/geek/gpg-quickstart and [GPG/PGP Basics](http://aplawrence.com/Basics/gpg.html)http://aplawrence.com/Basics/gpg.html and the [gnupg documentation](http://gnupg.org/documentation)http://gnupg.org/documentation among others.  \nThe private and public keys are the heart of asymmetric cryptography. What is important to remember:\n\n*   Your public key is used by _others_ to encrypt files that only you as the receiver can decrypt (not even the one who encrypted the file can decrypt it). The public key is thus meant to be distributed.\n*   Your private key is encrypted with your passphrase and is used to decrypt files which were encrypted with _your_ public key. The private key must be kept **secure**. Also if the key or passphrase is lost, so are all the files encrypted with your public key.\n*   The key files are called keyrings as they can contain more than one key.\n\nFirst generate a key pair. The defaults are fine, however you will have to enter at least your full name and email and optionally a comment. The comment is useful to create more than one key with the same name and email. Also you should use a \"passphrase\", not a simple password.\n\n\\# gpg --gen-key                      \\# This can take a long time\n\nThe keys are stored in ~/.gnupg/ on Unix, on Windows they are typically stored in  \nC:/Documents and Settings/%USERNAME%/Application Data/gnupg/.\n\n~/.gnupg/pubring.gpg                 \\# Contains your public keys and all others imported\n~/.gnupg/secring.gpg                 \\# Can contain more than one private key\n\nShort reminder on most used options:\n\n*   **\\-e** encrypt data\n*   **\\-d** decrypt data\n*   **\\-r** NAME encrypt for recipient NAME (or 'Full Name' or 'email@domain')\n*   **\\-a** create ascii armored output of a key\n*   **\\-o** use as output file\n\nThe examples use 'Your Name' and 'Alice' as the keys are referred to by the email or full name or partial name. For example I can use 'Colin' or 'c@cb.vu' for my key \\[Colin Barschel (cb.vu) <c@cb.vu>\\].\n\n### Encrypt for personal use only\n\nNo need to export/import any key for this. You have both already.\n\n\\# gpg -e -r 'Your Name' file                  \\# Encrypt with your public key\n# gpg -o file -d file.gpg                     \\# Decrypt. Use -o or it goes to stdout\n\n### Encrypt - Decrypt with keys\n\nFirst you need to export your public key for someone else to use it. And you need to import the public say from Alice to encrypt a file for her. You can either handle the keys in simple ascii files or use a public key server.  \nFor example Alice export her public key and you import it, you can then encrypt a file for her. That is only Alice will be able to decrypt it.\n\n\\# gpg -a -o alicekey.asc --export 'Alice'     \\# Alice exported her key in ascii file.\n# gpg --send-keys --keyserver subkeys.pgp.net KEYID   \\# Alice put her key on a server.\n# gpg --import alicekey.asc                   \\# You import her key into your pubring.\n# gpg --search-keys --keyserver subkeys.pgp.net 'Alice' \\# or get her key from a server.\n\nOnce the keys are imported it is very easy to encrypt or decrypt a file:\n\n\\# gpg -e -r 'Alice' file                      \\# Encrypt the file for Alice.\n# gpg -d file.gpg -o file                     \\# Decrypt a file encrypted by Alice for you.\n\n### Key administration\n\n\\# gpg --list-keys                             \\# list public keys and see the KEYIDS\n    The KEYID follows the '/' e.g. for: pub   1024D/D12B77CE the KEYID is D12B77CE\n# gpg --gen-revoke 'Your Name'                \\# generate revocation certificate\n# gpg --list-secret-keys                      \\# list private keys\n# gpg --delete-keys NAME                      \\# delete a public key from local key ring\n# gpg --delete-secret-key NAME                \\# delete a secret key from local key ring\n# gpg --fingerprint KEYID                     \\# Show the fingerprint of the key\n# gpg --edit-key KEYID                        \\# Edit key (e.g sign or add/del email)\n\nEncrypt Partitions\n==================\n\n[Linux with LUKS](#wluks) | [Linux dm-crypt only](#woluks) | [FreeBSD GELI](#bsdgeli) | [FBSD pwd only](#bsdpwd) | [OS X image](#osxcrypt)\n\nThere are (many) other alternative methods to encrypt disks, I only show here the methods I know and use. Keep in mind that the security is only good as long the OS has not been tempered with. An intruder could easily record the password from the keyboard events. Furthermore the data is freely accessible when the partition is _attached_ and will not prevent an intruder to have access to it in this state.\n\nLinux\n-----\n\nThose instructions use the Linux `dm-crypt` (device-mapper) facility available on the 2.6 kernel. In this example, lets encrypt the partition `/dev/sdc1`, it could be however any other partition or disk, or USB or a file based partition created with `losetup`. In this case we would use `/dev/loop0`. See [file image partition](#losetup). The device mapper uses labels to identify a partition. We use `sdc1` in this example, but it could be any string.\n\n### dm-crypt with LUKS\n\nLUKS with dm-crypt has better encryption and makes it possible to have multiple passphrase for the same partition or to change the password easily. To test if LUKS is available, simply type `# cryptsetup --help`, if nothing about LUKS shows up, use the instructions below [Without LUKS](#woluks). First create a partition if necessary: `fdisk /dev/sdc`.\n\n#### Create encrypted partition\n\n\\# dd if=/dev/urandom of=/dev/sdc1          \\# Optional. For paranoids only (takes days)\n# cryptsetup -y luksFormat /dev/sdc1       \\# This destroys any data on sdc1\n# cryptsetup luksOpen /dev/sdc1 sdc1\n# mkfs.ext3 /dev/mapper/sdc1               \\# create ext3 file system\n# mount -t ext3 /dev/mapper/sdc1 /mnt\n# umount /mnt\n# cryptsetup luksClose sdc1                \\# Detach the encrypted partition\n\n#### Attach\n\n\\# cryptsetup luksOpen /dev/sdc1 sdc1\n# mount -t ext3 /dev/mapper/sdc1 /mnt\n\n#### Detach\n\n\\# umount /mnt\n# cryptsetup luksClose sdc1\n\n### dm-crypt without LUKS\n\n\\# cryptsetup -y create sdc1 /dev/sdc1      \\# or any other partition like /dev/loop0\n# dmsetup ls                               \\# check it, will display: sdc1 (254, 0)\n# mkfs.ext3 /dev/mapper/sdc1               \\# This is done only the first time!\n# mount -t ext3 /dev/mapper/sdc1 /mnt\n# umount /mnt/\n# cryptsetup remove sdc1                   \\# Detach the encrypted partition\n\nDo exactly the same (without the mkfs part!) to re-attach the partition. If the password is not correct, the mount command will fail. In this case simply remove the map sdc1 (`cryptsetup remove sdc1`) and create it again.\n\nFreeBSD\n-------\n\nThe two popular FreeBSD disk encryption modules are `gbde` and `geli`. I now use geli because it is faster and also uses the crypto device for hardware acceleration. See The [FreeBSD handbook Chapter 18.6](http://www.freebsd.org/handbook/disks-encrypting.html)http://www.freebsd.org/handbook/disks-encrypting.html for all the details. The geli module must be loaded or compiled into the kernel:\n\noptions GEOM\\_ELI\ndevice crypto                                       \\# or as module:\n# echo 'geom\\_eli\\_load=\"YES\"' >> /boot/loader.conf   \\# or do: kldload geom\\_eli\n\n### Use password and key\n\nI use those settings for a typical disk encryption, it uses a passphrase AND a key to encrypt the master key. That is you need both the password and the generated key `/root/ad1.key` to attach the partition. The master key is stored inside the partition and is not visible. See below for typical USB or file based image.\n\n#### Create encrypted partition\n\n\\# dd if=/dev/random of=/root/ad1.key bs=64 count=1  \\# this key encrypts the mater key\n# geli init -s 4096 -K /root/ad1.key /dev/ad1       \\# -s 8192 is also OK for disks\n# geli attach -k /root/ad1.key /dev/ad1             \\# DO make a backup of /root/ad1.key\n# dd if=/dev/random of=/dev/ad1.eli bs=1m           \\# Optional and takes a long time\n# newfs /dev/ad1.eli                                \\# Create file system\n# mount /dev/ad1.eli /mnt\n\n#### Attach\n\n\\# geli attach -k /root/ad1.key /dev/ad1\n# fsck -ny -t ffs /dev/ad1.eli                      \\# In doubt check the file system\n# mount /dev/ad1.eli /mnt\n\n#### Detach\n\nThe detach procedure is done automatically on shutdown.\n\n\\# umount /mnt\n# geli detach /dev/ad1.eli\n\n#### /etc/fstab\n\nThe encrypted partition can be configured to be mounted with /etc/fstab. The password will be prompted when booting. The following settings are required for this example:\n\n\\# grep geli /etc/rc.conf\ngeli\\_devices=\"ad1\"\ngeli\\_ad1\\_flags=\"-k /root/ad1.key\"\n# grep geli /etc/fstab\n/dev/ad1.eli         /home/private              ufs             rw      0       0\n\n### Use password only\n\nIt is more convenient to encrypt a USB stick or file based image with a passphrase only and no key. In this case it is not necessary to carry the additional key file around. The procedure is very much the same as above, simply without the key file. Let's encrypt a file based image `/cryptedfile` of 1 GB.\n\n\\# dd if=/dev/zero of=/cryptedfile bs=1M count=1000  \\# 1 GB file\n# mdconfig -at vnode -f /cryptedfile\n# geli init /dev/md0                                \\# encrypts with password only\n# geli attach /dev/md0\n# newfs -U -m 0 /dev/md0.eli\n# mount /dev/md0.eli /mnt\n# umount /dev/md0.eli\n# geli detach md0.eli\n\nIt is now possible to mount this image on an other system with the password only.\n\n\\# mdconfig -at vnode -f /cryptedfile\n# geli attach /dev/md0\n# mount /dev/md0.eli /mnt\n\nOS X Encrypted Disk Image\n-------------------------\n\nDon't know by command line only. See [OS X Encrypted Disk Image](https://wiki.thayer.dartmouth.edu/display/computing/Creating+a+Mac+OS+X+Encrypted+Disk+Image)https://wiki.thayer.dartmouth.edu/display/computing/Creating+a+Mac+OS+X+Encrypted+Disk+Image and [Apple support](http://support.apple.com/kb/ht1578)http://support.apple.com/kb/ht1578\n\nSSL Certificates\n================\n\nSo called SSL/TLS certificates are cryptographic public key certificates and are composed of a public and a private key. The certificates are used to authenticate the endpoints and encrypt the data. They are used for example on a web server (https) or mail server (imaps).\n\nProcedure\n---------\n\n*   We need a certificate authority to sign our certificate. This step is usually provided by a vendor like Thawte, Verisign, etc., however we can also create our own.\n*   Create a certificate signing request. This request is like an unsigned certificate (the public part) and already contains all necessary information. The certificate request is normally sent to the authority vendor for signing. This step also creates the private key on the local machine.\n*   Sign the certificate with the certificate authority.\n*   If necessary join the certificate and the key in a single file to be used by the application (web server, mail server etc.).\n\nConfigure OpenSSL\n-----------------\n\nWe use /usr/local/certs as directory for this example check or edit /etc/ssl/openssl.cnf accordingly to your settings so you know where the files will be created. Here are the relevant part of openssl.cnf:\n\n\\[ CA\\_default \\]\ndir             = /usr/local/certs/CA       \\# Where everything is kept\ncerts           = $dir/certs                \\# Where the issued certs are kept\ncrl\\_dir         = $dir/crl                  \\# Where the issued crl are kept\ndatabase        = $dir/index.txt            \\# database index file.\n\nMake sure the directories exist or create them\n\n\\# mkdir -p /usr/local/certs/CA\n# cd /usr/local/certs/CA\n# mkdir certs crl newcerts private\n# echo \"01\" > serial                        \\# Only if serial does not exist\n# touch index.txt\n\nIf you intend to get a signed certificate from a vendor, you only need a certificate signing request (CSR). This CSR will then be signed by the vendor for a limited time (e.g. 1 year).\n\nCreate a certificate authority\n------------------------------\n\nIf you do not have a certificate authority from a vendor, you'll have to create your own. This step is not necessary if one intend to use a vendor to sign the request. To make a certificate authority (CA):\n\n\\# openssl req -new -x509 -days 730 -config /etc/ssl/openssl.cnf \\\\\n-keyout CA/private/cakey.pem -out CA/cacert.pem\n\nCreate a certificate signing request\n------------------------------------\n\nTo make a new certificate (for mail server or web server for example), first create a request certificate with its private key. If your application do not support encrypted private key (for example UW-IMAP does not), then disable encryption with `-nodes`.\n\n\\# openssl req -new -keyout newkey.pem -out newreq.pem \\\\\n-config /etc/ssl/openssl.cnf\n# openssl req -nodes -new -keyout newkey.pem -out newreq.pem \\\\\n-config /etc/ssl/openssl.cnf                \\# No encryption for the key\n\nKeep this created CSR (`newreq.pem`) as it can be signed again at the next renewal, the signature onlt will limit the validity of the certificate. This process also created the private key `newkey.pem`.\n\nSign the certificate\n--------------------\n\nThe certificate request has to be signed by the CA to be valid, this step is usually done by the vendor. _Note: replace \"servername\" with the name of your server in the next commands_.\n\n\\# cat newreq.pem newkey.pem > new.pem\n# openssl ca -policy policy\\_anything -out servernamecert.pem \\\\\n-config /etc/ssl/openssl.cnf -infiles new.pem\n# mv newkey.pem servernamekey.pem\n\nNow servernamekey.pem is the private key and servernamecert.pem is the server certificate.\n\nCreate united certificate\n-------------------------\n\nThe IMAP server wants to have both private key and server certificate in the same file. And in general, this is also easier to handle, but the file has to be kept securely!. Apache also can deal with it well. Create a file servername.pem containing both the certificate and key.\n\n*   Open the private key (servernamekey.pem) with a text editor and copy the private key into the \"servername.pem\" file.\n*   Do the same with the server certificate (servernamecert.pem).\n\nThe final servername.pem file should look like this:  \n  \n\n\\-----BEGIN RSA PRIVATE KEY-----\nMIICXQIBAAKBgQDutWy+o/XZ/\\[...\\]qK5LqQgT3c9dU6fcR+WuSs6aejdEDDqBRQ\n-----END RSA PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\nMIIERzCCA7CgAwIBAgIBBDANB\\[...\\]iG9w0BAQQFADCBxTELMAkGA1UEBhMCREUx\n-----END CERTIFICATE-----\n\nWhat we have now in the directory /usr/local/certs/:\n\n*   CA/private/cakey.pem _(CA server private key)_\n*   CA/cacert.pem _(CA server public key)_\n*   certs/servernamekey.pem _(server private key)_\n*   certs/servernamecert.pem _(server signed certificate)_\n*   certs/servername.pem _(server certificate with private key)_\n\nKeep the private key secure!\n\nView certificate information\n----------------------------\n\nTo view the certificate information simply do:\n\n\\# openssl x509 -text -in servernamecert.pem      \\# View the certificate info\n# openssl req -noout -text -in server.csr        \\# View the request info\n# openssl s\\_client -connect cb.vu:443            \\# Check a web server certificate\n\nCVS\n===\n\n[Server setup](#cvssetup) | [CVS test](#cvstest) | [SSH tunneling](#cvsssh) | [CVS usage](#cvsusage)\n\nServer setup\n------------\n\n### Initiate the CVS\n\nDecide where the main repository will rest and create a root cvs. For example /usr/local/cvs (as root):\n\n\\# mkdir -p /usr/local/cvs\n# setenv CVSROOT /usr/local/cvs      \\# Set CVSROOT to the new location (local)\n# cvs init                           \\# Creates all internal CVS config files\n# cd /root\n# cvs checkout CVSROOT               \\# Checkout the config files to modify them\n# cd CVSROOT\nedit config ( fine as it is)\n# cvs commit config\ncat >> writers                       \\# Create a writers file (optionally also readers)\ncolin\n^D                                   \\# Use \\[Control\\]\\[D\\] to quit the edit\n# cvs add writers                    \\# Add the file writers into the repository\n# cvs edit checkoutlist\n# cat >> checkoutlist\nwriters\n^D                                   \\# Use \\[Control\\]\\[D\\] to quit the edit\n# cvs commit                         \\# Commit all the configuration changes\n\nAdd a **readers** file if you want to differentiate read and write permissions _Note:_ Do not (ever) edit files directly into the main cvs, but rather checkout the file, modify it and check it in. We did this with the file **writers** to define the write access.  \nThere are three popular ways to access the CVS at this point. The first two don't need any further configuration. See the examples on [CVSROOT](#cvsroot) below for how to use them:\n\n*   Direct local access to the file system. The user(s) need sufficient file permission to access the CS directly and there is no further authentication in addition to the OS login. However this is only useful if the repository is local.\n*   Remote access with ssh with the ext protocol. Any use with an ssh shell account and read/write permissions on the CVS server can access the CVS directly with ext over ssh without any additional tunnel. There is no server process running on the CVS for this to work. The ssh login does the authentication.\n*   Remote access with pserver (default port: 2401/tcp). This is the preferred use for larger user base as the users are authenticated by the CVS pserver with a dedicated password database, there is therefore no need for local users accounts. This setup is explained below.\n\n### Network setup with inetd\n\nThe CVS can be run locally only if a network access is not needed. For a remote access, the daemon inetd can start the pserver with the following line in /etc/inetd.conf (/etc/xinetd.d/cvs on SuSE):\n\ncvspserver\tstream  tcp  nowait  cvs  /usr/bin/cvs\tcvs \\\\\n--allow-root=/usr/local/cvs pserver\n\nIt is a good idea to block the cvs port from the Internet with the firewall and use an ssh tunnel to access the repository remotely.\n\n### Separate authentication\n\nIt is possible to have cvs users which are not part of the OS (no local users). This is actually probably wanted too from the security point of view. Simply add a file named **passwd** (in the CVSROOT directory) containing the users login and password in the crypt format. This is can be done with the apache htpasswd tool.  \n_Note:_ This passwd file is the only file which has to be edited directly in the CVSROOT directory. Also it won't be checked out. More info with htpasswd --help\n\n\\# htpasswd -cb passwd user1 password1  \\# -c creates the file\n# htpasswd -b passwd user2 password2\n\nNow add `:cvs` at the end of each line to tell the cvs server to change the user to cvs (or whatever your cvs server is running under). It looks like this:\n\n\\# cat passwd\nuser1:xsFjhU22u8Fuo:cvs\nuser2:vnefJOsnnvToM:cvs\n\nTest it\n-------\n\nTest the login as normal user (for example here me)\n\n\\# cvs -d :pserver:colin@192.168.50.254:/usr/local/cvs login\nLogging in to :pserver:colin@192.168.50.254:2401/usr/local/cvs\nCVS password:\n\n### CVSROOT variable\n\nThis is an environment variable used to specify the location of the repository we're doing operations on. For local use, it can be just set to the directory of the repository. For use over the network, the transport protocol must be specified. Set the CVSROOT variable with `setenv CVSROOT string` on a csh, tcsh shell, or with `export CVSROOT=string` on a sh, bash shell.\n\n\\# setenv CVSROOT :pserver:<username>@<host>:/cvsdirectory\n_For example:_\n# setenv CVSROOT /usr/local/cvs                               \\# Used locally only\n# setenv CVSROOT :local:/usr/local/cvs                        \\# Same as above\n# setenv CVSROOT :ext:user@cvsserver:/usr/local/cvs           \\# Direct access with SSH\n# setenv CVS\\_RSH ssh                                          \\# for the ext access\n# setenv CVSROOT :pserver:user@cvsserver.254:/usr/local/cvs   \\# network with pserver\n\nWhen the login succeeded one can import a new project into the repository: **cd into** your project root directory\n\ncvs import <module name> <vendor tag> <initial tag>\ncvs -d :pserver:colin@192.168.50.254:/usr/local/cvs import MyProject MyCompany START\n\nWhere MyProject is the name of the new project in the repository (used later to checkout). Cvs will import the current directory content into the new project.  \n  \nTo checkout:\n\n\\# cvs -d :pserver:colin@192.168.50.254:/usr/local/cvs checkout MyProject\n_or_\n# setenv CVSROOT :pserver:colin@192.168.50.254:/usr/local/cvs\n# cvs checkout MyProject\n\nSSH tunneling for CVS\n---------------------\n\nWe need 2 shells for this. On the first shell we connect to the cvs server with ssh and port-forward the cvs connection. On the second shell we use the cvs normally as if it where running locally.  \non shell 1:\n\n\\# ssh -L2401:localhost:2401 colin@cvs\\_server   \\# Connect directly to the CVS server. Or:\n# ssh -L2401:cvs\\_server:2401 colin@gateway     \\# Use a gateway to reach the CVS\n\non shell 2:\n\n\\# setenv CVSROOT :pserver:colin@localhost:/usr/local/cvs\n# cvs login\nLogging in to :pserver:colin@localhost:2401/usr/local/cvs\nCVS password:\n# cvs checkout MyProject/src\n\nCVS commands and usage\n----------------------\n\n### Import\n\nThe import command is used to add a whole directory, it must be run from within the directory to be imported. Say the directory /devel/ contains all files and subdirectories to be imported. The directory name on the CVS (the module) will be called \"myapp\".\n\n\\# cvs import \\[options\\] directory-name vendor-tag release-tag\n# cd /devel                          \\# Must be inside the project to import it\n# cvs import myapp Company R1\\_0      \\# Release tag can be anything in one word\n\nAfter a while a new directory \"/devel/tools/\" was added and it has to be imported too.\n\n\\# cd /devel/tools\n# cvs import myapp/tools Company R1\\_0\n\n### Checkout update add commit\n\n\\# cvs co myapp/tools                 \\# Will only checkout the directory tools\n# cvs co -r R1\\_1 myapp               \\# Checkout myapp at release R1\\_1 (is sticky)\n# cvs -q -d update -P                \\# A typical CVS update\n# cvs update -A                      \\# Reset any sticky tag (or date, option)\n# cvs add newfile                    \\# Add a new file\n# cvs add -kb newfile                \\# Add a new binary file\n# cvs commit file1 file2             \\# Commit the two files only\n# cvs commit -m \"message\"            \\# Commit all changes done with a message\n\n### Create a patch\n\nIt is best to create and apply a patch from the working development directory related to the project, or from within the source directory.\n\n\\# cd /devel/project\n# diff -Naur olddir newdir > patchfile \\# Create a patch from a directory or a file\n# diff -Naur oldfile newfile > patchfile\n\n### Apply a patch\n\nSometimes it is necessary to strip a directory level from the patch, depending how it was created. In case of difficulties, simply look at the first lines of the patch and try -p0, -p1 or -p2.\n\n\\# cd /devel/project\n# patch --dry-run -p0 < patchfile    \\# Test the path without applying it\n# patch -p0 < patchfile\n# patch -p1 < patchfile              \\# strip off the 1st level from the path\n\nSVN\n===\n\n[Server setup](#svnsetup) | [SVN+SSH](#svnssh) | [SVN over http](#svnhttp) | [SVN usage](#svnusage)\n\n[Subversion (SVN)](http://subversion.tigris.org/)http://subversion.tigris.org/ is a version control system designed to be the successor of CVS (Concurrent Versions System). The concept is similar to CVS, but many shortcomings where improved. See also the [SVN book](http://svnbook.red-bean.com/en/1.4/)http://svnbook.red-bean.com/en/1.4/.\n\nServer setup\n------------\n\nThe initiation of the repository is fairly simple (here for example `/home/svn/` must exist):\n\n\\# svnadmin create --fs-type fsfs /home/svn/project1\n\nNow the access to the repository is made possible with:\n\n*   `file://` Direct file system access with the svn client with. This requires local permissions on the file system.\n*   `svn://` or `svn+ssh://` Remote access with the svnserve server (also over SSH). This requires local permissions on the file system (default port: 2690/tcp).\n*   `http://` Remote access with webdav using apache. No local users are necessary for this method.\n\nUsing the local file system, it is now possible to import and then check out an existing project. Unlike with CVS it is not necessary to cd into the project directory, simply give the full path:\n\n\\# svn import /project1/ file:///home/svn/project1/trunk -m 'Initial import'\n# svn checkout file:///home/svn/project1\n\nThe new directory \"trunk\" is only a convention, this is not required.\n\n### Remote access with ssh\n\nNo special setup is required to access the repository via ssh, simply replace `file://` with `svn+ssh/hostname`. For example:\n\n\\# svn checkout svn+ssh://hostname/home/svn/project1\n\nAs with the local file access, every user needs an ssh access to the server (with a local account) and also read/write access. This method might be suitable for a small group. All users could belong to a subversion group which owns the repository, for example:\n\n\\# groupadd subversion\n# groupmod -A user1 subversion\n# chown -R root:subversion /home/svn\n# chmod -R 770 /home/svn\n\n### Remote access with http (apache)\n\nRemote access over http (https) is the only good solution for a larger user group. This method uses the apache authentication, not the local accounts. This is a typical but small apache configuration:\n\nLoadModule dav\\_module         modules/mod\\_dav.so\nLoadModule dav\\_svn\\_module     modules/mod\\_dav\\_svn.so\nLoadModule authz\\_svn\\_module   modules/mod\\_authz\\_svn.so    # Only for access control\n\n<Location /svn>\n  DAV svn\n  \\# any \"/svn/foo\" URL will map to a repository /home/svn/foo\n  SVNParentPath /home/svn\n  AuthType Basic\n  AuthName \"Subversion repository\"\n  AuthzSVNAccessFile /etc/apache2/svn.acl\n  AuthUserFile /etc/apache2/svn-passwd\n  Require valid-user\n</Location>\n\nThe apache server needs full access to the repository:\n\n\\# chown -R www:www /home/svn\n\nCreate a user with htpasswd2:\n\n\\# htpasswd -c /etc/svn-passwd user1  # -c creates the file\n\n#### Access control svn.acl example\n\n\\# Default it read access. \"\\* =\" would be default no access\n\\[/\\]\n\\* = r\n\\[groups\\]\nproject1-developers = joe, jack, jane\n\\# Give write access to the developers\n\\[project1:\\]\n@project1-developers = rw\n\nSVN commands and usage\n----------------------\n\nSee also the [Subversion Quick Reference Card](http://www.cs.put.poznan.pl/csobaniec/Papers/svn-refcard.pdf)http://www.cs.put.poznan.pl/csobaniec/Papers/svn-refcard.pdf. [Tortoise SVN](http://tortoisesvn.tigris.org/)http://tortoisesvn.tigris.org is a nice Windows interface.\n\n### Import\n\nA new project, that is a directory with some files, is imported into the repository with the `import` command. Import is also used to add a directory with its content to an existing project.\n\n\\# svn help import                                # Get help for any command\n    # Add a new directory (with content) into the src dir on project1\n# svn import /project1/newdir http://host.url/svn/project1/trunk/src -m 'add newdir'\n\n### Typical SVN commands\n\n\\# svn co http://host.url/svn/project1/trunk      # Checkout the most recent version\n    # Tags and branches are created by copying\n# svn mkdir http://host.url/svn/project1/tags/   # Create the tags directory\n# svn copy -m \"Tag rc1 rel.\" http://host.url/svn/project1/trunk \\\\\n                             http://host.url/svn/project1/tags/1.0rc1\n# svn status \\[--verbose\\]                         # Check files status into working dir\n# svn add src/file.h src/file.cpp                # Add two files\n# svn commit -m 'Added new class file'           # Commit the changes with a message\n# svn ls http://host.url/svn/project1/tags/      # List all tags\n# svn move foo.c bar.c                           # Move (rename) files\n# svn delete some\\_old\\_file                       # Delete files\n\nUseful Commands\n===============\n\n[less](#less) | [vi](#vi) | [mail](#mail) | [tar](#tar) | [zip](#zip) | [dd](#dd) | [screen](#screen) | [find](#find) | [Miscellaneous](#misccmd)\n\nless\n----\n\nThe `less` command displays a text document on the console. It is present on most installation.\n\n\\# less unixtoolbox.xhtml\n\nSome important commands are (^N stands for \\[control\\]-\\[N\\]):\n\n*   **h H**       good help on display\n*   **f ^F ^V SPACE**       Forward one window (or N lines).\n*   **b ^B ESC-v**       Backward one window (or N lines).\n*   **F**       Forward forever; like \"tail -f\".\n*   **/pattern**       Search forward for (N-th) matching line.\n*   **?pattern**       Search backward for (N-th) matching line.\n*   **n**       Repeat previous search (for N-th occurrence).\n*   **N**       Repeat previous search in reverse direction.\n*   **q**       quit\n\nvi\n--\n\nVi is present on ANY Linux/Unix installation (not gentoo?) and it is therefore useful to know some basic commands. There are two modes: command mode and insertion mode. The commands mode is accessed with **\\[ESC\\]**, the insertion mode with **i**. Use `: help` if you are lost.  \nThe editors `nano` and `pico` are usually available too and are easier (IMHO) to use.\n\n### Quit\n\n*   **:w** newfilename       save the file to newfilename\n*   **:wq or :x**       save and quit\n*   **:q!**       quit without saving\n\n### Search and move\n\n*   **/string**       Search forward for string\n*   **?string**       Search back for string\n*   **n**       Search for next instance of string\n*   **N**       Search for previous instance of string\n*   **{**       Move a paragraph back\n*   **}**       Move a paragraph forward\n*   **1G**       Move to the first line of the file\n*   **nG**       Move to the n th line of the file\n*   **G**       Move to the last line of the file\n*   **:%s/OLD/NEW/g**       Search and replace every occurrence\n\n### Delete copy paste text\n\n*   **dd (dw)**       Cut current line (word)\n*   **D**       Cut to the end of the line\n*   **x**       Delete (cut) character\n*   **yy (yw)**       Copy line (word) after cursor\n*   **P**       Paste after cursor\n*   **u**       Undo last modification\n*   **U**       Undo all changes to current line\n\nmail\n----\n\nThe `mail` command is a basic application to read and send email, it is usually installed. To send an email simply type \"mail user@domain\". The first line is the subject, then the mail content. Terminate and send the email with a single dot (.) in a new line. Example:\n\n\\# mail c@cb.vu\nSubject: Your text is full of typos\n\"For a moment, nothing happened. Then, after a second or so, \nnothing continued to happen.\"\n.\nEOT\n#\n\nThis is also working with a pipe:\n\n\\# echo \"This is the mail body\" | mail c@cb.vu\n\nThis is also a simple way to test the mail server.\n\ntar\n---\n\nThe command `tar` (tape archive) creates and extracts archives of file and directories. The archive .tar is uncompressed, a compressed archive has the extension .tgz or .tar.gz (zip) or .tbz (bzip2). Do not use absolute path when creating an archive, you probably want to unpack it somewhere else. Some typical commands are:\n\n### Create\n\n\\# cd /\n# tar -cf home.tar home/        \\# archive the whole /home directory (c for create)\n# tar -czf home.tgz home/       \\# same with zip compression\n# tar -cjf home.tbz home/       \\# same with bzip2 compression\n\nOnly include one (or two) directories from a tree, but keep the relative structure. For example archive /usr/local/etc and /usr/local/www and the first directory in the archive should be local/.\n\n\\# tar -C /usr -czf local.tgz local/etc local/www\n# tar -C /usr -xzf local.tgz    \\# To untar the local dir into /usr\n# cd /usr; tar -xzf local.tgz   \\# Is the same as above\n\n### Extract\n\n\\# tar -tzf home.tgz             \\# look inside the archive without extracting (list)\n# tar -xf home.tar              \\# extract the archive here (x for extract)\n# tar -xzf home.tgz             \\# same with zip compression (-xjf for bzip2 compression)\n                                \\# remove leading path gallery2 and extract into gallery\n# tar --strip-components 1 -zxvf gallery2.tgz -C gallery/ \n# tar -xjf home.tbz home/colin/file.txt    \\# Restore a single file\n# tar -xOf home.tbz home/colin/file.txt    \\# Print file to stdout (no extraction)\n\n### More advanced\n\n\\# tar c dir/ | gzip | ssh user@remote 'dd of=dir.tgz' \\# arch dir/ and store remotely.\n# tar cvf - \\`find . -print\\` > backup.tar              \\# arch the current directory.\n# tar -cf - -C /etc . | tar xpf - -C /backup/etc      \\# Copy directories\n# tar -cf - -C /etc . | ssh user@remote tar xpf - -C /backup/etc      \\# Remote copy.\n# tar -czf home.tgz --exclude '\\*.o' --exclude 'tmp/' home/\n\nzip/unzip\n---------\n\nZip files can be easier to share with Windows.\n\n\\# zip -r fileName.zip /path/to/dir                    \\# zip dir into file fileName.zip\n# unzip fileName.zip                                  \\# uncompress zip file\n# unzip -l fileName.zip                               \\# list files inside archive\n# unzip -c fileName.zip fileinside.txt                \\# print one file to stdout (no extraction)\n# unzip fileName.zip fileinside.txt                   \\# extract one file only\n\ndd\n--\n\nThe program `dd` (disk dump or destroy disk or see [the meaning of dd](http://roesler-ac.de/wolfram/acro/credits.htm)) is used to copy partitions and disks and for other copy tricks. Typical usage:\n\n\\# dd if=<source> of=<target> bs=<byte size> conv=<conversion>\n# kill -INFO PID                                      \\# View dd progress (FreeBSD, OSX)\n\nImportant conv options:\n\n*   `notrunc`       do not truncate the output file, all zeros will be written as zeros.\n*   `noerror`       continue after read errors (e.g. bad blocks)\n*   `sync`       pad every input block with Nulls to ibs-size\n\nThe default byte size is 512 (one block). The MBR, where the partition table is located, is on the first block, the first 63 blocks of a disk are empty. Larger byte sizes are faster to copy but require also more memory.\n\n### Backup and restore\n\n\\# dd if=/dev/hda of=/dev/hdc bs=16065b                \\# Copy disk to disk (same size)\n# dd if=/dev/sda7 of=/home/root.img bs=4096 conv=notrunc,noerror \\# Backup /\n# dd if=/home/root.img of=/dev/sda7 bs=4096 conv=notrunc,noerror \\# Restore /\n# dd bs=1M if=/dev/ad4s3e | gzip -c > ad4s3e.gz                  \\# Zip the backup\n# gunzip -dc ad4s3e.gz | dd of=/dev/ad0s3e bs=1M                 \\# Restore the zip\n# dd bs=1M if=/dev/ad4s3e | gzip | ssh eedcoba@fry 'dd of=ad4s3e.gz' \\# also remote\n# gunzip -dc ad4s3e.gz | ssh eedcoba@host 'dd of=/dev/ad0s3e bs=1M'\n# dd if=/dev/ad0 of=/dev/ad2 skip=1 seek=1 bs=4k conv=noerror    \\# Skip MBR\n    \\# This is necessary if the destination (ad2) is smaller.\n# dd if=/vm/FreeBSD-8.2-RELEASE-amd64-memstick.img of=/dev/disk1 bs=10240 conv=sync\n    \\# Copy FreeBSD image to USB memory stick\n\n### Recover\n\nThe command `dd` will read _every single block_ of the partition. In case of problems it is better to use the option `conv=sync,noerror` so dd will skip the bad block and write zeros at the destination. Accordingly it is important to set the block size equal or smaller than the disk block size. A 1k size seems safe, set it with `bs=1k`. If a disk has bad sectors and the data should be recovered from a partition, create an image file with dd, mount the image and copy the content to a new disk. With the option `noerror`, dd will skip the bad sectors and write zeros instead, thus only the data contained in the bad sectors will be lost.\n\n\\# dd if=/dev/hda of=/dev/null bs=1m                   \\# Check for bad blocks\n# dd bs=1k if=/dev/hda1 conv=sync,noerror,notrunc | gzip | ssh \\\\ \\# Send to remote\nroot@fry 'dd of=hda1.gz bs=1k'\n# dd bs=1k if=/dev/hda1 conv=sync,noerror,notrunc of=hda1.img    \\# Store into an image\n# mount -o loop /hda1.img /mnt                        \\# [Mount the image](#createimg)\n# rsync -ax /mnt/ /newdisk/                           \\# Copy on a new disk\n# dd if=/dev/hda of=/dev/hda                          \\# Refresh the magnetic state\n  \\# The above is useful to refresh a disk. It is perfectly safe, but must be unmounted.\n\n### Delete\n\n\\# dd if=/dev/zero of=/dev/hdc                         \\# Delete full disk\n# dd if=/dev/urandom of=/dev/hdc                      \\# Delete full disk better\n# kill -USR1 PID                                      \\# View dd progress (Linux)\n# kill -INFO PID                                      \\# View dd progress (FreeBSD)\n\n### MBR tricks\n\nThe MBR contains the boot loader and the partition table and is 512 bytes small. The first 446 are for the boot loader, the bytes 446 to 512 are for the partition table.\n\n\\# dd if=/dev/sda of=/mbr\\_sda.bak bs=512 count=1       \\# Backup the full MBR\n# dd if=/dev/zero of=/dev/sda bs=512 count=1          \\# Delete MBR and partition table\n# dd if=/mbr\\_sda.bak of=/dev/sda bs=512 count=1       \\# Restore the full MBR\n# dd if=/mbr\\_sda.bak of=/dev/sda bs=446 count=1       \\# Restore only the boot loader\n# dd if=/mbr\\_sda.bak of=/dev/sda bs=1 count=64 skip=446 seek=446 \\# Restore partition table\n\nscreen\n------\n\nScreen (a must have) has two main functionalities:\n\n*   Run multiple terminal session within a single terminal.\n*   A started program is decoupled from the real terminal and can thus run in the background. The real terminal can be closed and reattached later.\n\n### Short start example\n\nstart screen with:\n\n\\# screen\n\nWithin the screen session we can start a long lasting program (like top).\n\n\\# top\n\nNow detach with **Ctrl-a Ctrl-d**. Reattach the terminal with:\n\n\\# screen -R -D\n\nIn detail this means: If a session is running, then reattach. If necessary detach and logout remotely first. If it was not running create it and notify the user. Or:\n\n\\# screen -x\n\nAttach to a running screen in a multi display mode. The console is thus shared among multiple users. Very useful for team work/debug!\n\n### Screen commands (within screen)\n\nAll screen commands start with **Ctrl-a**.\n\n*   **Ctrl-a ?** help and summary of functions\n*   **Ctrl-a c** create an new window (terminal)\n*   **Ctrl-a Ctrl-n and Ctrl-a Ctrl-p** to switch to the next or previous window in the list, by number.\n*   **Ctrl-a Ctrl-N** where N is a number from 0 to 9, to switch to the corresponding window.\n*   **Ctrl-a \"** to get a navigable list of running windows\n*   **Ctrl-a a** to clear a missed Ctrl-a\n*   **Ctrl-a Ctrl-d** to disconnect and leave the session running in the background\n*   **Ctrl-a x** lock the screen terminal with a password\n*   **Ctrl-a \\[** enter into **scrollback** mode, exit with **esc**.  \n    Use `echo \"defscrollback 5000\" > ~/.screenrc` to increase buffer (default is 100)\n\n*   **C-u** Scrolls a half page up\n*   **C-b** Scroll a full page up\n*   **C-d** Scroll a half page down\n*   **C-f** Scroll a full page down\n*   **/** Search forward\n*   **?** Search backward\n\nThe screen session is terminated when the program within the running terminal is closed and you logout from the terminal.\n\nFind\n----\n\nSome important options:\n\n*   `-x` (on BSD) `-xdev` (on Linux)       Stay on the same file system (dev in fstab).\n*   `-exec cmd {} \\;`       Execute the command and replace {} with the full path\n*   `-iname`       Like -name but is case insensitive\n*   `-ls`       Display information about the file (like ls -la)\n*   `-size n`       n is +-n (k M G T P)\n*   `-cmin n`       File's status was last changed n minutes ago.\n\n\\# find . -type f ! -perm -444        \\# Find files not readable by all\n# find . -type d ! -perm -111        \\# Find dirs not accessible by all\n# find /home/user/ -cmin 10 -print   \\# Files created or modified in the last 10 min.\n# find . -name '\\*.\\[ch\\]' | xargs grep -E 'expr' \\# Search 'expr' in this dir and below.\n# find / -name \"\\*.core\" | xargs rm   \\# Find core dumps and delete them (also try core.\\*)\n# find / -name \"\\*.core\" -print -exec rm {} \\\\;  \\# Other syntax\n      \\# Find images and create an archive, iname is not case sensitive. -r for append\n# find . \\\\( -iname \"\\*.png\" -o -iname \"\\*.jpg\" \\\\) -print -exec tar -rf images.tar {} \\\\;\n# find . -type f -name \"\\*.txt\" ! -name README.txt -print  \\# Exclude README.txt files\n# find /var/ -size +10M -exec ls -lh {} \\\\;     \\# Find large files > 10 MB\n# find /var/ -size +10M -ls           \\# This is simpler\n# find . -size +10M -size -50M -print\n# find /usr/ports/ -name work -type d -print -exec rm -rf {} \\\\;  \\# Clean the ports\n      \\# Find files with SUID; those file are vulnerable and must be kept secure\n# find / -type f -user root -perm -4000 -exec ls -l {} \\\\;\n# find flac/ -iname \\*.flac -print -size +500k -exec /Applications/Fluke.app/Contents/MacOS/Fluke {} \\\\;\n                                      \\# I use above to add flac files to iTunes on OSX\n\nBe careful with xarg or exec as it might or might not honor quotings and can return wrong results when files or directories contain spaces. In doubt use \"-print0 | xargs -0\" instead of \"| xargs\". The option -print0 must be the last in the find command. See this nice [mini tutorial for find](http://www.hccfl.edu/pollock/Unix/FindCmd.htm)http://www.hccfl.edu/pollock/Unix/FindCmd.htm.\n\n\\# find . -type f | xargs ls -l       \\# Will not work with spaces in names\n# find . -type f -print0 | xargs -0 ls -l  \\# Will work with spaces in names\n# find . -type f -exec ls -l '{}' \\\\; \\# Or use quotes '{}' with -exec\n\nDuplicate directory tree:\n\n\\# find . -type d -exec mkdir -p /tmp/new\\_dest/{} \\\\;\n\nMiscellaneous\n-------------\n\n\\# which command                      \\# Show full path name of command\n# time command                       \\# See how long a command takes to execute\n# time cat                           \\# Use time as stopwatch. Ctrl-c to stop\n# set | grep $USER                   \\# List the current environment\n# cal -3                             \\# Display a three month calendar\n# date \\[-u|--utc|--universal\\] \\[MMDDhhmm\\[\\[CC\\]YY\\]\\[.ss\\]\\]\n# date 10022155                      \\# Set date and time\n# whatis grep                        \\# Display a short info on the command or word\n# whereis java                       \\# Search path and standard directories for word\n# setenv varname value               \\# Set env. variable varname to value (csh/tcsh)\n# export varname=\"value\"             \\# set env. variable varname to value (sh/ksh/bash)\n# pwd                                \\# Print working directory\n# mkdir -p /path/to/dir              \\# no error if existing, make parent dirs as needed\n# mkdir -p project/{bin,src,obj,doc/{html,man,pdf},debug/some/more/dirs}\n# rmdir /path/to/dir                 \\# Remove directory\n# rm -rf /path/to/dir                \\# Remove directory and its content (force)\n# rm -- -badchar.txt                 \\# Remove file whitch starts with a dash (-)\n# cp -la /dir1 /dir2                 \\# Archive and hard link files instead of copy\n# cp -lpR /dir1 /dir2                \\# Same for FreeBSD\n# cp unixtoolbox.xhtml{,.bak}        \\# Short way to copy the file with a new extension\n# mv /dir1 /dir2                     \\# Rename a directory\n# ls -1                              \\# list one file per line\n# history | tail -50                 \\# Display the last 50 used commands\n# cd -                               \\# cd to previous ($OLDPWD) directory\n# /bin/ls| grep -v .py | xargs rm -r \\# pipe file names to rm with xargs\n\nCheck file hashes with openssl. This is a nice alternative to the commands `md5sum` or `sha1sum` (FreeBSD uses `md5` and `sha1`) which are not always installed.\n\n\\# openssl md5 file.tar.gz            \\# Generate an md5 checksum from file\n# openssl sha1 file.tar.gz           \\# Generate an sha1 checksum from file\n# openssl rmd160 file.tar.gz         \\# Generate a RIPEMD-160 checksum from file\n\nInstall Software\n================\n\nUsually the package manager uses the proxy variable for http/ftp requests. In .bashrc:\n\nexport http\\_proxy=http://proxy\\_server:3128\nexport ftp\\_proxy=http://proxy\\_server:3128\n\nList installed packages\n-----------------------\n\n\\# rpm -qa                            \\# List installed packages (RH, SuSE, RPM based)\n# dpkg -l                            \\# Debian, Ubuntu\n# pkg\\_info                           \\# FreeBSD list all installed packages\n# pkg\\_info -W smbd                   \\# FreeBSD show which package smbd belongs to\n# pkginfo                            \\# Solaris\n\nAdd/remove software\n-------------------\n\nFront ends: yast2/yast for SuSE, redhat-config-packages for Red Hat.\n\n\\# rpm -i pkgname.rpm                 \\# install the package (RH, SuSE, RPM based)\n# rpm -e pkgname                     \\# Remove package\n\n### SuSE zypper [(see doc and cheet sheet)](http://en.opensuse.org/SDB:Zypper_usage)http://en.opensuse.org/SDB:Zypper\\_usage\n\n\\# zypper refresh                     \\# Refresh repositorie\n# zypper install vim                 \\# Install the package vim\n# zypper remove vim                  \\# Remove the package vim\n# zypper search vim                  \\# Search packages with vim\n# zypper update vim                  \\# Search packages with vim\n\n### Debian\n\n\\# apt-get update                     \\# First update the package lists\n# apt-get install emacs              \\# Install the package emacs\n# dpkg --remove emacs                \\# Remove the package emacs\n# dpkg -S file                       \\# find what package a file belongs to\n\n### Gentoo\n\nGentoo uses emerge as the heart of its \"Portage\" package management system.\n\n\\# emerge --sync                      \\# First sync the local portage tree\n# emerge -u packagename              \\# Install or upgrade a package\n# emerge -C packagename              \\# Remove the package\n# revdep-rebuild                     \\# Repair dependencies\n\n### Solaris\n\nThe <cdrom> path is usually `/cdrom/cdrom0`.\n\n\\# pkgadd -d <cdrom>/Solaris\\_9/Product SUNWgtar\n# pkgadd -d SUNWgtar                 \\# Add downloaded package (bunzip2 first)\n# pkgrm SUNWgtar                     \\# Remove the package\n\n### FreeBSD\n\n\\# pkg\\_add -r rsync                   \\# Fetch and install rsync.\n# pkg\\_delete /var/db/pkg/rsync-xx    \\# Delete the rsync package\n\nSet where the packages are fetched from with the `PACKAGESITE` variable. For example:\n\n\\# export PACKAGESITE=ftp://ftp.freebsd.org/pub/FreeBSD/ports/i386/packages/Latest/ \n# or ftp://ftp.freebsd.org/pub/FreeBSD/ports/i386/packages-6-stable/Latest/\n\n### FreeBSD [ports](http://www.freebsd.org/handbook/ports.html)http://www.freebsd.org/handbook/ports.html\n\nThe port tree `/usr/ports/` is a collection of software ready to compile and install (see man ports). The ports are updated with the program `portsnap`.\n\n\\# portsnap fetch extract             \\# Create the tree when running the first time\n# portsnap fetch update              \\# Update the port tree\n# cd /usr/ports/net/rsync/           \\# Select the package to install\n# make install distclean             \\# Install and cleanup (also see man ports)\n# make package                       \\# Make a binary package of this port\n# pkgdb -F                           \\# Fix the package registry database\n# portsclean -C -DD                  \\# Clean workdir and distdir (part of portupgrade)\n\n### OS X [MacPorts](http://guide.macports.org/)http://guide.macports.org/ (use sudo for all commands)\n\n\\# port selfupdate                    \\# Update the port tree (safe)\n# port installed                     \\# List installed ports\n# port deps apache2                  \\# List dependencies for this port\n# port search pgrep                  \\# Search for string\n# port install proctools             \\# Install this package\n# port variants ghostscript          \\# List variants of this port\n# port -v install ghostscript +no\\_x11\\# -no\\_x11 for negative value\n# port clean --all ghostscript       \\# Clean workdir of port\n# port upgrade ghostscript           \\# Upgrade this port\n# port uninstall ghostscript         \\# Uninstall this port\n# port -f uninstall installed        \\# Uninstall everything\n\nLibrary path\n------------\n\nDue to complex dependencies and runtime linking, programs are difficult to copy to an other system or distribution. However for small programs with little dependencies, the missing libraries can be copied over. The runtime libraries (and the missing one) are checked with `ldd` and managed with `ldconfig`.\n\n\\# ldd /usr/bin/rsync                 \\# List all needed runtime libraries\n# otool -L /usr/bin/rsync            \\# OS X equivalent to ldd\n# ldconfig -n /path/to/libs/         \\# Add a path to the shared libraries directories\n# ldconfig -m /path/to/libs/         \\# FreeBSD\n# LD\\_LIBRARY\\_PATH                    \\# The variable set the link library path\n\nConvert Media\n=============\n\nSometimes one simply need to convert a video, audio file or document to another format.\n\nText encoding\n-------------\n\nText encoding can get totally wrong, specially when the language requires special characters like Ã Ã¤Ã§. The command `iconv` can convert from one encoding to an other.\n\n\\# iconv -f <from\\_encoding> -t <to\\_encoding> <input\\_file>\n# iconv -f ISO8859-1 -t UTF-8 -o file.input > file\\_utf8\n# iconv -l                           \\# List known coded character sets\n\nWithout the -f option, iconv will use the local char-set, which is usually fine if the document displays well.  \nConvert filenames from one encoding to another (not file content). Works also if only some files are already utf8\n\n\\# convmv -r -f utf8 --nfd -t utf8 --nfc /dir/\\* --notest\n\nUnix - DOS newlines\n-------------------\n\nConvert DOS (CR/LF) to Unix (LF) newlines and back **within a Unix shell**. See also `dos2unix` and `unix2dos` if you have them.\n\n\\# sed 's/.$//' dosfile.txt > unixfile.txt                  \\# DOS to UNIX\n# awk '{sub(/\\\\r$/,\"\");print}' dosfile.txt > unixfile.txt   \\# DOS to UNIX\n# awk '{sub(/$/,\"\\\\r\");print}' unixfile.txt > dosfile.txt   \\# UNIX to DOS\n\nConvert Unix to DOS newlines **within a Windows environment**. Use sed or awk from mingw or cygwin.\n\n\\# sed -n p unixfile.txt > dosfile.txt\n# awk 1 unixfile.txt > dosfile.txt   \\# UNIX to DOS (with a cygwin shell)\n\nRemove `^M` mac newline and replace with unix new line. To get a `^M` use CTL-V then CTL-M\n\n\\# tr '^M' '\\\\n' < macfile.txt\n\nPDF to Jpeg and concatenate PDF files\n-------------------------------------\n\nConvert a PDF document with `gs` (GhostScript) to jpeg (or png) images for each page. Also much shorter with `convert` and `mogrify` (from ImageMagick or GraphicsMagick).\n\n\\# gs -dBATCH -dNOPAUSE -sDEVICE=jpeg -r150 -dTextAlphaBits=4 -dGraphicsAlphaBits=4 \\\\\n -dMaxStripSize=8192 -sOutputFile=unixtoolbox\\_%d.jpg unixtoolbox.pdf\n# convert unixtoolbox.pdf unixtoolbox-%03d.png\n# convert \\*.jpeg images.pdf          \\# Create a simple PDF with all pictures\n# convert image000\\* -resample 120x120 -compress JPEG -quality 80 images.pdf\n# mogrify -format png \\*.ppm          \\# convert all ppm images to png format\n\nGhostscript can also concatenate multiple pdf files into a single one. This only works well if the PDF files are \"well behaved\".\n\n\\# gs -q -sPAPERSIZE=a4 -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=all.pdf \\\\\nfile1.pdf file2.pdf ...              \\# On Windows use '#' instead of '='\n\nExtract images from pdf document using `pdfimages` from poppler or [`xpdf`](http://foolabs.com/xpdf/download.html)http://foolabs.com/xpdf/download.html\n\n\\# pdfimages document.pdf dst/        \\# extract all images and put in dst\n# yum install poppler-utils          \\# install poppler-utils if needed. or:\n# apt-get install poppler-utils\n\nConvert video\n-------------\n\nCompress the Canon digicam video with an mpeg4 codec and repair the crappy sound.\n\n\\# mencoder -o videoout.avi -oac mp3lame -ovc lavc -srate 11025 \\\\\n-channels 1 -af-adv force=1 -lameopts preset=medium -lavcopts \\\\\nvcodec=msmpeg4v2:vbitrate=600 -mc 0 vidoein.AVI\n\nSee [sox](http://sox.sourceforge.net/) for sound processing.\n\nCopy an audio cd\n----------------\n\nThe program [`cdparanoia`](http://xiph.org/paranoia/)http://xiph.org/paranoia/ can save the audio tracks (FreeBSD port in audio/cdparanoia/), `oggenc` can encode in Ogg Vorbis format, `lame` converts to mp3.\n\n\\# cdparanoia -B                      \\# Copy the tracks to wav files in current dir\n# lame -b 256 in.wav out.mp3         \\# Encode in mp3 256 kb/s\n# for i in \\*.wav; do lame -b 256 $i \\`basename $i .wav\\`.mp3; done\n# oggenc in.wav -b 256 out.ogg       \\# Encode in Ogg Vorbis 256 kb/s\n\nPrinting\n========\n\nPrint with lpr\n--------------\n\n\\# lpr unixtoolbox.ps                 \\# Print on default printer\n# export PRINTER=hp4600              \\# Change the default printer\n# lpr -Php4500 #2 unixtoolbox.ps     \\# Use printer hp4500 and print 2 copies\n# lpr -o Duplex=DuplexNoTumble ...   \\# Print duplex along the long side\n# lpr -o PageSize=A4,Duplex=DuplexNoTumble ...\n\n\\# lpq                                \\# Check the queue on default printer\n# lpq -l -Php4500                    \\# Queue on printer hp4500 with verbose\n# lprm -                             \\# Remove all users jobs on default printer\n# lprm -Php4500 3186                 \\# Remove job 3186. Find job nbr with lpq\n# lpc status                         \\# List all available printers\n# lpc status hp4500                  \\# Check if printer is online and queue length\n\nSome devices are not postscript and will print garbage when fed with a pdf file. This might be solved with:\n\n\\# gs -dSAFER -dNOPAUSE -sDEVICE=deskjet -sOutputFile=\\\\|lpr file.pdf\n\nPrint to a PDF file even if the application does not support it. Use `gs` on the print command instead of `lpr`.\n\n\\# gs -q -sPAPERSIZE=a4 -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=/path/file.pdf\n\nDatabases\n=========\n\nPostgreSQL\n----------\n\n### Change root or a username password\n\n\\# psql -d template1 -U pgsql\n> alter user pgsql with password 'pgsql\\_password';  \\# Use username instead of \"pgsql\"\n\n### Create user and database\n\nThe commands `createuser`, `dropuser`, `createdb` and `dropdb` are convenient shortcuts equivalent to the SQL commands. The new user is bob with database bobdb ; use as root with pgsql the database super user:\n\n\\# createuser -U pgsql -P bob         \\# -P will ask for password\n# createdb -U pgsql -O bob bobdb     \\# new bobdb is owned by bob\n# dropdb bobdb                       \\# Delete database bobdb\n# dropuser bob                       \\# Delete user bob\n\nThe general database authentication mechanism is configured in pg\\_hba.conf\n\n### Grant remote access\n\nThe file `$PGSQL_DATA_D/postgresql.conf` specifies the address to bind to. Typically `listen_addresses = '*'` for Postgres 8.x.  \nThe file `$PGSQL_DATA_D/pg_hba.conf` defines the access control. Examples:\n\n\\# TYPE  DATABASE    USER        IP-ADDRESS        IP-MASK          METHOD\nhost    bobdb       bob        212.117.81.42     255.255.255.255   password\nhost    all         all        0.0.0.0/0                           password\n\n### Backup and restore\n\nThe backups and restore are done with the user pgsql or postgres. Backup and restore a single database:\n\n\\# pg\\_dump --clean dbname > dbname\\_sql.dump\n# psql dbname < dbname\\_sql.dump\n\nBackup and restore all databases (including users):\n\n\\# pg\\_dumpall --clean > full.dump\n# psql -f full.dump postgres\n\nIn this case the restore is started with the database postgres which is better when reloading an empty cluster.\n\nMySQL\n-----\n\n### Change mysql root or username password\n\n#### Method 1\n\n\\# /etc/init.d/mysql stop\n_or_\n# killall mysqld\n# mysqld --skip-grant-tables\n# mysqladmin -u root password 'newpasswd'\n# /etc/init.d/mysql start\n\n#### Method 2\n\n\\# mysql -u root mysql\nmysql> UPDATE USER SET PASSWORD=PASSWORD(\"newpassword\") where user='root';\nmysql> FLUSH PRIVILEGES;                           \\# Use username instead of \"root\"\nmysql> quit\n\n### Create user and database (see [MySQL doc](http://dev.mysql.com/doc/refman/5.1/en/adding-users.html)http://dev.mysql.com/doc/refman/5.1/en/adding-users.html)\n\n\\# mysql -u root mysql\nmysql> CREATE USER 'bob'@'localhost' IDENTIFIED BY 'pwd'; \\# create only a user\nmysql> CREATE DATABASE bobdb;\nmysql> GRANT ALL ON \\*.\\* TO 'bob'@'%' IDENTIFIED BY 'pwd'; \\# Use localhost instead of %\n                                                   \\# to restrict the network access\nmysql> DROP DATABASE bobdb;                        \\# Delete database\nmysql> DROP USER bob;                              \\# Delete user\nmysql> DELETE FROM mysql.user WHERE user='bob and host='hostname'; \\# Alt. command\nmysql> FLUSH PRIVILEGES;\n\n### Grant remote access\n\nRemote access is typically permitted for a database, and not all databases. The file `/etc/my.cnf` contains the IP address to bind to. (On FreeBSD `my.cnf` not created per fedault, copy one `.cnf` file from `/usr/local/share/mysql` to `/usr/local/etc/my.cnf`) Typically comment the line `bind-address =` out.\n\n\\# mysql -u root mysql\nmysql> GRANT ALL ON bobdb.\\* TO bob@'xxx.xxx.xxx.xxx' IDENTIFIED BY 'PASSWORD';\nmysql> REVOKE GRANT OPTION ON foo.\\* FROM bar@'xxx.xxx.xxx.xxx';\nmysql> FLUSH PRIVILEGES;                  \\# Use 'hostname' or also '%' for full access\n\n### Backup and restore\n\nBackup and restore a single database:\n\n\\# mysqldump -u root -psecret --add-drop-database dbname > dbname\\_sql.dump\n# mysql -u root -psecret -D dbname < dbname\\_sql.dump\n\nBackup and restore all databases:\n\n\\# mysqldump -u root -psecret --add-drop-database --all-databases > full.dump\n# mysql -u root -psecret < full.dump\n\nHere is \"secret\" the mysql root password, there is no space after -p. When the -p option is used alone (w/o password), the password is asked at the command prompt.\n\nSQLite\n------\n\n[SQLite](http://www.sqlite.org/)http://www.sqlite.org is a small powerful self-contained, serverless, zero-configuration SQL database.\n\n### Dump and restore\n\nIt can be useful to dump and restore an SQLite database. For example you can edit the dump file to change a column attribute or type and then restore the database. This is easier than messing with SQL commands. Use the command `sqlite3` for a 3.x database.\n\n\\# sqlite database.db .dump > dump.sql              \\# dump\n# sqlite database.db < dump.sql                    \\# restore\n\n### Convert 2.x to 3.x database\n\nsqlite database\\_v2.db .dump | sqlite3 database\\_v3.db\n\nDisk Quota\n==========\n\nA disk quota allows to limit the amount of disk space and/or the number of files a user or (or member of group) can use. The quotas are allocated on a per-file system basis and are enforced by the kernel.\n\nLinux setup\n-----------\n\nThe quota tools package usually needs to be installed, it contains the command line tools.  \nActivate the user quota in the fstab and remount the partition. If the partition is busy, either all locked files must be closed, or the system must be rebooted. Add `usrquota` to the fstab mount options, for example:\n\n/dev/sda2     /home    reiserfs     rw,acl,user\\_xattr,usrquota 1 1\n# mount -o remount /home\n# mount                              \\# Check if usrquota is active, otherwise reboot\n\nInitialize the quota.user file with `quotacheck`.\n\n\\# quotacheck -vum /home\n# chmod 644 /home/aquota.user        \\# To let the users check their own quota\n\nActivate the quota either with the provided script (e.g. /etc/init.d/quotad on SuSE) or with `quotaon`:\n\nquotaon -vu /home\n\nCheck that the quota is active with:\n\nquota -v\n\nFreeBSD setup\n-------------\n\nThe quota tools are part of the base system, however the kernel needs the option quota. If it is not there, add it and [recompile](#compilekernel) the kernel.\n\noptions QUOTA\n\nAs with Linux, add the quota to the fstab options (userquota, not usrquota):\n\n/dev/ad0s1d    /home    ufs     rw,noatime,userquota    2  2\n# mount /home                        \\# To remount the partition\n\nEnable disk quotas in /etc/rc.conf and start the quota.\n\n\\# grep quotas /etc/rc.conf\nenable\\_quotas=\"YES\"                  \\# turn on quotas on startup (or NO).\ncheck\\_quotas=\"YES\"                   \\# Check quotas on startup (or NO).\n# /etc/rc.d/quota start\n\nAssign quota limits\n-------------------\n\nThe quotas are not limited per default (set to 0). The limits are set with `edquota` for single users. A quota can be also duplicated to many users. The file structure is different between the quota implementations, but the principle is the same: the values of blocks and inodes can be limited. _Only change the values of soft and hard_. If not specified, the blocks are 1k. The grace period is set with `edquota -t`. For example:\n\n\\# edquota -u colin\n\n### Linux\n\nDisk quotas for user colin (uid 1007):\n  Filesystem         blocks       soft       hard     inodes     soft     hard\n  /dev/sda8            108       1000       2000          1        0        0\n\n### FreeBSD\n\nQuotas for user colin:\n/home: kbytes in use: 504184, limits (soft = 700000, hard = 800000)\n   inodes in use: 1792, limits (soft = 0, hard = 0)\n\n### For many users\n\nThe command `edquota -p` is used to duplicate a quota to other users. For example to duplicate a reference quota to all users:\n\n\\# edquota -p refuser \\`awk -F: '$3 > 499 {print $1}' /etc/passwd\\`\n# edquota -p refuser user1 user2     \\# Duplicate to 2 users\n\n### Checks\n\nUsers can check their quota by simply typing `quota` (the file quota.user must be readable). Root can check all quotas.\n\n\\# quota -u colin                     \\# Check quota for a user\n# repquota /home                     \\# Full report for the partition for all users\n\nShells\n======\n\nMost Linux distributions use the bash shell while the BSDs use tcsh, the bourne shell is only used for scripts. Filters are very useful and can be piped:\n\n*   `grep`   Pattern matching\n*   `sed`   Search and Replace strings or characters\n*   `cut`   Print specific columns from a marker\n*   `sort`   Sort alphabetically or numerically\n*   `uniq`   Remove duplicate lines from a file\n\nFor example used all at once:\n\n\\# ifconfig | sed 's/  / /g' | cut -d\" \" -f1 | uniq | grep -E \"\\[a-z0-9\\]+\" | sort -r\n# ifconfig | sed '/.\\*inet addr:/!d;s///;s/ .\\*//'|sort -t. -k1,1n -k2,2n -k3,3n -k4,4n\n\nThe first character in the sed pattern is a tab. To write a tab on the console, use ctrl-v ctrl-tab.\n\nbash\n----\n\nRedirects and pipes for bash and sh:\n\n\\# cmd 1> file                         \\# Redirect stdout to file.\n# cmd 2> file                         \\# Redirect stderr to file.\n# cmd 1>> file                        \\# Redirect and append stdout to file.\n# cmd &> file                         \\# Redirect both stdout and stderr to file.\n# cmd >file 2>&1                      \\# Redirects stderr to stdout and then to file.\n# cmd1 | cmd2                         \\# pipe stdout to cmd2\n# cmd1 2>&1 | cmd2                    \\# pipe stdout and stderr to cmd2\n\nModify your configuration in ~/.bashrc (it can also be ~/.bash\\_profile). The following entries are useful, reload with \". .bashrc\". With cygwin use ~/.bash\\_profile; with rxvt past with shift + left-click.\n\n\\# in .bashrc\nbind '\"\\\\e\\[A\"':history-search-backward \\# Use up and down arrow to search\nbind '\"\\\\e\\[B\"':history-search-forward  \\# the history. Invaluable!\nset -o emacs                          \\# Set emacs mode in bash (see below)\nset bell-style visible                \\# Do not beep, inverse colors\n    \\# Set a nice prompt like \\[user@host\\]/path/todir>\nPS1=\"\\\\\\[\\\\033\\[1;30m\\\\\\]\\[\\\\\\[\\\\033\\[1;34m\\\\\\]\\\\u\\\\\\[\\\\033\\[1;30m\\\\\\]\"\nPS1=\"$PS1@\\\\\\[\\\\033\\[0;33m\\\\\\]\\\\h\\\\\\[\\\\033\\[1;30m\\\\\\]\\]\\\\\\[\\\\033\\[0;37m\\\\\\]\"\nPS1=\"$PS1\\\\w\\\\\\[\\\\033\\[1;30m\\\\\\]>\\\\\\[\\\\033\\[0m\\\\\\]\"\n\n\\# To check the currently active aliases, simply type alias\nalias  ls='ls -aF'                    \\# Append indicator (one of \\*/=>@|)\nalias  ll='ls -aFls'                  \\# Listing\nalias  la='ls -all'\nalias ..='cd ..'\nalias ...='cd ../..'\nexport HISTFILESIZE=5000              \\# Larger history\nexport CLICOLOR=1                     \\# Use colors (if possible)\nexport LSCOLORS=ExGxFxdxCxDxDxBxBxExEx\n\ntcsh\n----\n\nRedirects and pipes for tcsh and csh (simple > and >> are the same as sh):\n\n\\# cmd >& file                         \\# Redirect both stdout and stderr to file.\n# cmd >>& file                        \\# Append both stdout and stderr to file.\n# cmd1 | cmd2                         \\# pipe stdout to cmd2\n# cmd1 |& cmd2                        \\# pipe stdout and stderr to cmd2\n\nThe settings for csh/tcsh are set in `~/.cshrc`, reload with \"source .cshrc\". Examples:\n\n\\# in .cshrc\nalias  ls      'ls -aF'\nalias  ll      'ls -aFls'\nalias  la      'ls -all'\nalias  ..      'cd ..'\nalias  ...     'cd ../..'\nset   prompt    = \"%B%n%b@%B%m%b%/> \" \\# like user@host/path/todir>\nset   history   =  5000\nset   savehist  = ( 6000 merge )\nset   autolist                        \\# Report possible completions with tab\nset   visiblebell                     \\# Do not beep, inverse colors\n\n\\# Bindkey and colors\nbindkey -e     Select Emacs bindings  \\# Use emacs keys to edit the command prompt\nbindkey -k up history-search-backward \\# Use up and down arrow to search\nbindkey -k down history-search-forward\nsetenv CLICOLOR 1                     \\# Use colors (if possible)\nsetenv LSCOLORS ExGxFxdxCxDxDxBxBxExEx\n\nThe emacs mode enables to use the emacs keys shortcuts to modify the command prompt line. This is extremely useful (not only for emacs users). The most used commands are:\n\n*   C-a       Move cursor to beginning of line\n*   C-e       Move cursor to end of line\n*   M-b       Move cursor back one word\n*   M-f       Move cursor forward one word\n*   M-d       Cut the next word\n*   C-w       Cut the last word\n*   C-u       Cut everything before the cursor\n*   C-k       Cut everything after the cursor (rest of the line)\n*   C-y       Paste the last thing to be cut (simply paste)\n*   C-\\_       Undo\n\n_Note:_ C- = hold control, M- = hold meta (which is usually the alt or escape key).\n\nScripting\n=========\n\n[Basics](#bournebasics) | [Script example](#bourneexample) | [awk](#awk) | [sed](#sed) | [Regular Expressions](#regex) | [useful commands](#shcmd)\n\nThe Bourne shell (/bin/sh) is present on all Unix installations and scripts written in this language are (quite) portable; `man 1 sh` is a good reference.\n\nBasics\n------\n\n### Variables and arguments\n\nAssign with variable=value and get content with $variable\n\nMESSAGE=\"Hello World\"                        \\# Assign a string\nPI=3.1415                                    \\# Assign a decimal number\nN=8\nTWON=\\`expr $N \\* 2\\`                           \\# Arithmetic expression (only integers)\nTWON=$(($N \\* 2))                             \\# Other syntax\nTWOPI=\\`echo \"$PI \\* 2\" | bc -l\\`               \\# Use bc for floating point operations\nZERO=\\`echo \"c($PI/4)-sqrt(2)/2\" | bc -l\\`\n\nThe command line arguments are\n\n$0, $1, $2, ...                              \\# $0 is the command itself \n$#                                           \\# The number of arguments\n$\\*                                           \\# All arguments (also $@)\n\n### Special Variables\n\n$$                                           \\# The current process ID\n$?                                           \\# exit status of last command\n  command\n  if \\[ $? != 0 \\]; then\n    echo \"command failed\"\n  fi\nmypath\\=\\`pwd\\`\nmypath\\=${mypath}/file.txt\necho ${mypath##\\*/}                           \\# Display the filename only\necho ${mypath%%.\\*}                           \\# Full path without extention\nfoo=/tmp/my.dir/filename.tar.gz\npath = ${foo%/\\*}                             \\# Full path without extention\nvar2\\=${var:=string}                          \\# Use var if set, otherwise use string\n                                             # assign string to var and then to var2.\nsize=$(stat -c%s \"$file\")                    \\# get file size in bourne script\nfilesize=${size:=-1}\n\n### Constructs\n\nfor file in \\`ls\\`\ndo\n    echo $file\ndone\n\ncount\\=0\nwhile \\[ $count -lt 5 \\]; do\n    echo $count\n    sleep 1\n    count\\=$(($count + 1))\ndone\n\nmyfunction() {\n    find . -type f -name \"\\*.$1\" -print       \\# $1 is first argument of the function\n}\nmyfunction \"txt\"\n\n#### Generate a file\n\nMYHOME\\=/home/colin\ncat > testhome.sh << \\_EOF\n\\# All of this goes into the file testhome.sh\nif \\[ -d \"$MYHOME\" \\] ; then\n    echo $MYHOME exists\nelse\n    echo $MYHOME does not exist\nfi\n\\_EOF\nsh testhome.sh\n\nBourne script example\n---------------------\n\nAs a small example, the script used to create a PDF booklet from this xhtml document:\n\n#!/bin/sh\n\\# This script creates a book in pdf format ready to print on a duplex printer\nif \\[ $# \\-ne 1 \\]; then                        \\# Check the argument\n  echo 1>&2 \"Usage: $0 HtmlFile\"\n  exit 1                                     \\# non zero exit if error\nfi\n\nfile\\=$1                                      \\# Assign the filename\nfname\\=${file%.\\*}                             \\# Get the name of the file only\nfext\\=${file#\\*.}                              \\# Get the extension of the file\n\nprince $file -o $fname.pdf                   \\# from www.princexml.com\npdftops -paper A4 -noshrink $fname.pdf $fname.ps \\# create postscript booklet\ncat $fname.ps |psbook|psnup -Pa4 -2 |pstops -b \"2:0,1U(21cm,29.7cm)\" > $fname.book.ps\n\nps2pdf13 -sPAPERSIZE=a4 -sAutoRotatePages=None $fname.book.ps $fname.book.pdf\n                                             \\# use #a4 and #None on Windows!\nexit 0                                       \\# exit 0 means successful\n\nSome awk commands\n-----------------\n\nAwk is useful for field stripping, like cut in a more powerful way. Search this document for other examples. See for example [gnulamp.com](http://www.gnulamp.com/awk.html) and [one-liners for awk](http://student.northpark.edu/pemente/awk/awk1line.txt) for some nice examples.\n\nawk '{ print $2, $1 }' file                  \\# Print and inverse first two columns\nawk '{printf(\"%5d : %s\\\\n\", NR,$0)}' file     \\# Add line number left aligned\nawk '{print FNR \"\\\\t\" $0}' files              \\# Add line number right aligned\nawk NF test.txt                              \\# remove blank lines (same as grep '.')\nawk 'length > 80'                            \\# print line longer than 80 char)\n\nSome sed commands\n-----------------\n\nHere is [the one liner gold mine](http://student.northpark.edu/pemente/sed/sed1line.txt)http://student.northpark.edu/pemente/sed/sed1line.txt. And a good [introduction and tutorial to sed](http://www.grymoire.com/Unix/Sed.html)http://www.grymoire.com/Unix/Sed.html.\n\nsed 's/string1/string2/g'                    \\# Replace string1 with string2\nsed -i 's/wroong/wrong/g' \\*.txt              \\# Replace a recurring word with g\nsed 's/\\\\(.\\*\\\\)1/\\\\12/g'                        \\# Modify anystring1 to anystring2\nsed '/<p>/,/<\\\\/p>/d' t.xhtml                 \\# Delete lines that start with <p>\n                                             \\# and end with </p>\nsed '/ \\*#/d; /^ \\*$/d'                        \\# Remove comments and blank lines\nsed 's/\\[ \\\\t\\]\\*$//'                            \\# Remove trailing spaces (use tab as \\\\t)\nsed 's/^\\[ \\\\t\\]\\*//;s/\\[ \\\\t\\]\\*$//'                \\# Remove leading and trailing spaces\nsed 's/\\[^\\*\\]/\\[&\\]/'                            \\# Enclose first char with \\[\\] top->\\[t\\]op\nsed = file | sed 'N;s/\\\\n/\\\\t/' > file.num     \\# Number lines on a file\n\nRegular Expressions\n-------------------\n\nSome basic regular expression useful for sed too. See [Basic Regex Syntax](http://www.regular-expressions.info/reference.html)http://www.regular-expressions.info/reference.html for a good primer.\n\n\\[\\\\^$.|?\\*+()                          \\# special characters any other will match themselves\n\\\\                                    \\# escapes special characters and treat as literal\n\\*                                    \\# repeat the previous item zero or more times\n.                                    \\# single character except line break characters\n.\\*                                   \\# match zero or more characters\n^                                    \\# match at the start of a line/string\n$                                    \\# match at the end of a line/string\n.$                                   \\# match a single character at the end of line/string\n^ $                                  \\# match line with a single space\n\\[^A-Z\\]                               \\# match any line beginning with any char from A to Z\n\nSome useful commands\n--------------------\n\nThe following commands are useful to include in a script or as one liners.\n\nsort -t. -k1,1n -k2,2n -k3,3n -k4,4n         \\# Sort IPv4 ip addresses\necho 'Test' | tr '\\[:lower:\\]' '\\[:upper:\\]'     \\# Case conversion\necho foo.bar | cut -d . -f 1                 \\# Returns foo\nPID=$(ps | grep script.sh | grep bin | awk '{print $1}')    \\# PID of a running script\nPID=$(ps axww | grep \\[p\\]ing | awk '{print $1}')             \\# PID of ping (w/o grep pid)\nIP=$(ifconfig $INTERFACE | sed '/.\\*inet addr:/!d;s///;s/ .\\*//')   \\# Linux\nIP=$(ifconfig $INTERFACE | sed '/.\\*inet /!d;s///;s/ .\\*//')        \\# FreeBSD\nif \\[ \\`diff file1 file2 | wc -l\\` != 0 \\]; then \\[...\\] fi       \\# File changed?\ncat /etc/master.passwd | grep -v root | grep -v \\\\\\*: | awk -F\":\" \\\\ \\# Create http passwd\n'{ printf(\"%s:%s\\\\n\", $1, $2) }' > /usr/local/etc/apache2/passwd\n\ntestuser=$(cat /usr/local/etc/apache2/passwd | grep -v \\\\    \\# Check user in passwd\nroot | grep -v \\\\\\*: | awk -F\":\" '{ printf(\"%s\\\\n\", $1) }' | grep ^user$)\n:(){ :|:& };:                                \\# bash fork bomb. Will kill your machine\ntail +2 file > file2                         \\# remove the first line from file\n\nI use this little trick to change the file extension for many files at once. For example from .cxx to .cpp. Test it first without the `| sh` at the end. You can also do this with the command `rename` if installed. Or with bash builtins.\n\n\\# ls \\*.cxx | awk -F. '{print \"mv \"$0\" \"$1\".cpp\"}' | sh\n# ls \\*.c | sed \"s/.\\*/cp & &.$(date \"+%Y%m%d\")/\" | sh \\# e.g. copy \\*.c to \\*.c.20080401\n# rename .cxx .cpp \\*.cxx                             \\# Rename all .cxx to cpp\n# for i in \\*.cxx; do mv $i ${i%%.cxx}.cpp; done      \\# with bash builtins\n\nProgramming\n===========\n\nC basics\n--------\n\nstrcpy(newstr,str)                        /\\* copy str to newstr \\*/\nexpr1 ? expr2 : expr3                     /\\* if (expr1) expr2 else expr3 \\*/\nx = (y > z) ? y : z;                      /\\* if (y > z) x = y; else x = z; \\*/\nint a\\[\\]={0,1,2};                          /\\* Initialized array (or a\\[3\\]={0,1,2}; \\*/\nint a\\[2\\]\\[3\\]={{1,2,3},{4,5,6}};            /\\* Array of array of ints \\*/\nint i = 12345;                            /\\* Convert in i to char str \\*/\nchar str\\[10\\];\nsprintf(str, \"%d\", i);\n\nC example\n---------\n\nA minimal c program simple.c:\n\n#include <stdio.h>\nmain() {\n    int number=42;\n    printf(\"The answer is %i\\\\n\", number);  \n}\n\nCompile with:\n\n\\# gcc simple.c -o simple\n# ./simple\nThe answer is 42\n\nC++ basics\n----------\n\n\\*pointer                                  // Object pointed to by pointer\n&obj                                      // Address of object obj\nobj.x                                     // Member x of class obj (object obj)\npobj->x                                   // Member x of class pointed to by pobj\n                                          // (\\*pobj).x and pobj->x are the same\n\nC++ example\n-----------\n\nAs a slightly more realistic program in C++: a class in its own header (IPv4.h) and implementation (IPv4.cpp) and a program which uses the class functionality. The class converts an IP address in integer format to the known quad format.\n\n### IPv4 class\n\n#### IPv4.h:\n\n#ifndef IPV4\\_H\n#define IPV4\\_H\n#include <string>\n\nnamespace GenericUtils {                          // create a namespace\nclass IPv4 {                                      // class definition\npublic:\n    IPv4(); ~IPv4();\n    std::string IPint\\_to\\_IPquad(unsigned long ip);// member interface\n};\n} //namespace GenericUtils\n#endif // IPV4\\_H\n\n#### IPv4.cpp:\n\n#include \"IPv4.h\"\n#include <string>\n#include <sstream>\nusing namespace std;                              // use the namespaces\nusing namespace GenericUtils;\n\nIPv4::IPv4() {}                                   // default constructor/destructor\nIPv4::~IPv4() {}\nstring IPv4::IPint\\_to\\_IPquad(unsigned long ip) {  // member implementation\n    ostringstream ipstr;                          // use a stringstream\n    ipstr << ((ip &0xff000000) >> 24)             // Bitwise right shift\n          << \".\" << ((ip &0x00ff0000) >> 16)\n          << \".\" << ((ip &0x0000ff00) >> 8)\n          << \".\" << ((ip &0x000000ff));\n    return ipstr.str();\n}\n\n### The program simplecpp.cpp\n\n#include \"IPv4.h\"\n#include <iostream>\n#include <string>\nusing namespace std;\nint main (int argc, char\\* argv\\[\\]) {\n    string ipstr;                                 // define variables\n    unsigned long ipint = 1347861486;             // The IP in integer form\n    GenericUtils::IPv4 iputils;                   // create an object of the class\n    ipstr = iputils.IPint\\_to\\_IPquad(ipint);       // call the class member\n    cout << ipint << \" = \" << ipstr << endl;      // print the result\n\n    return 0;\n}\n\nCompile and execute with:\n\n\\# g++ -c IPv4.cpp simplecpp.cpp                \\# Compile in objects\n# g++ IPv4.o simplecpp.o -o simplecpp.exe      \\# Link the objects to final executable\n# ./simplecpp.exe \n1347861486 = 80.86.187.238\n\nUse `ldd` to check which libraries are used by the executable and where they are located. Also used to check if a shared library is missing or if the executable is static.\n\n\\# ldd /sbin/ifconfig                           \\# list dynamic object dependencies\n# ar rcs staticlib.a \\*.o                       \\# create static archive\n# ar t staticlib.a                             \\# print the objects list from the archive\n# ar x /usr/lib/libc.a version.o               \\# extract an object file from the archive\n# nm version.o                                 \\# show function members provided by object\n\nSimple Makefile\n---------------\n\nThe minimal Makefile for the multi-source program is shown below. The lines with instructions _must begin with a tab_! The back slash \"\\\\\" can be used to cut long lines.\n\nCC = g++\nCFLAGS = -O\nOBJS = IPv4.o simplecpp.o\n\nsimplecpp: ${OBJS}\n\t${CC} -o simplecpp ${CFLAGS} ${OBJS}\nclean:\n\trm -f ${TARGET} ${OBJS}\n\nOnline Help\n===========\n\nDocumentation\n-------------\n\n[Linux Documentation](http://en.tldp.org/)\n\nen.tldp.org\n\n[Linux Man Pages](http://www.linuxmanpages.com/)\n\nwww.linuxmanpages.com\n\n[Linux commands directory](http://www.oreillynet.com/linux/cmd/)\n\nwww.oreillynet.com/linux/cmd\n\n[Linux doc man howtos](http://linux.die.net/)\n\nlinux.die.net\n\n[FreeBSD Handbook](http://www.freebsd.org/handbook/)\n\nwww.freebsd.org/handbook\n\n[FreeBSD Man Pages](http://www.freebsd.org/cgi/man.cgi)\n\nwww.freebsd.org/cgi/man.cgi\n\n[FreeBSD user wiki](http://www.freebsdwiki.net/)\n\nwww.freebsdwiki.net\n\n[Solaris Man Pages](http://docs.sun.com/app/docs/coll/40.10)\n\ndocs.sun.com/app/docs/coll/40.10\n\nOther Unix/Linux references\n---------------------------\n\n[Rosetta Stone for Unix](http://bhami.com/rosetta.html)\n\nbhami.com/rosetta.html (a Unix command translator)\n\n[Unix guide cross reference](http://unixguide.net/unixguide.shtml)\n\nunixguide.net/unixguide.shtml\n\n[Linux commands line list](http://www.linuxcmd.org/)\n\nwww.linuxcmd.org\n\n[Short Linux reference](http://www.pixelbeat.org/cmdline.html)\n\nwww.pixelbeat.org/cmdline.html\n\n[Little command line goodies](http://www.shell-fu.org/)\n\nwww.shell-fu.org\n\nThat's all folks!\n\nThis document: \"Unix Toolbox revision 14.4\" is licensed under a [Creative Commons Licence \\[Attribution - Share Alike\\]](http://creativecommons.org/licenses/by-sa/3.0/). Â© [Colin Barschel](mailto:c_at_cb.vu) 2007-2012. Some rights reserved.","tags":[],"_id":"note:BS-BItcQk","_rev":"8-5b4324e962f8a18c70c61506220adfb7"}